// #!/usr/bin/env python3.8
// # @generated by pegen from /Users/scork/Desktop/PythonProjects/cpython/Grammar/python.gram

import * as ast from "./ast";
import * as astnodes from "../asdl/astnodes";

import { memoize, memoizeLeftRec, Parser, logger } from "./parser";

const EXTRA = []; // todo

const pegen = new Proxy({}, { get: (target, key) => (...args) => {console.log(key, args); return args;}});

export class GeneratedParser extends Parser {
    // @memoize
    file() {
        //# file: statements? $
        let a, endmarker, mark;
        mark = this.mark();
        if ((a = this.statements()) && (endmarker = this.expect("ENDMARKER"))) {
            return pegen.make_module(a);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    interactive() {
        //# interactive: statement_newline
        let a, mark;
        mark = this.mark();
        if ((a = this.statement_newline())) {
            return new astnodes.Interactive(a);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    eval() {
        //# eval: expressions NEWLINE* $
        let _loop0_1, a, endmarker, mark;
        mark = this.mark();
        if ((a = this.expressions()) && (_loop0_1 = this._loop0_1()) && (endmarker = this.expect("ENDMARKER"))) {
            return new astnodes.Expression(a);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    func_type() {
        //# func_type: '(' type_expressions? ')' '->' expression NEWLINE* $
        let _loop0_2, a, b, endmarker, literal, literal_1, literal_2, mark;
        mark = this.mark();
        if (
            (literal = this.expect("(")) &&
            (a = this.type_expressions()) &&
            (literal_1 = this.expect(")")) &&
            (literal_2 = this.expect("->")) &&
            (b = this.expression()) &&
            (_loop0_2 = this._loop0_2()) &&
            (endmarker = this.expect("ENDMARKER"))
        ) {
            return new astnodes.FunctionType(a, b);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    fstring() {
        //# fstring: star_expressions
        let mark, star_expressions;
        mark = this.mark();
        if ((star_expressions = this.star_expressions())) {
            return star_expressions;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    type_expressions() {
        //# type_expressions: ','.expression+ ',' '*' expression ',' '**' expression | ','.expression+ ',' '*' expression | ','.expression+ ',' '**' expression | '*' expression ',' '**' expression | '*' expression | '**' expression | ','.expression+
        let a, b, c, literal, literal_1, literal_2, literal_3, mark;
        mark = this.mark();
        if (
            (a = this._gather_3()) &&
            (literal = this.expect(",")) &&
            (literal_1 = this.expect("*")) &&
            (b = this.expression()) &&
            (literal_2 = this.expect(",")) &&
            (literal_3 = this.expect("**")) &&
            (c = this.expression())
        ) {
            return pegen.seq_append_to_end(pegen.seq_append_to_end(a, b), c);
        }
        this.reset(mark);
        if ((a = this._gather_5()) && (literal = this.expect(",")) && (literal_1 = this.expect("*")) && (b = this.expression())) {
            return pegen.seq_append_to_end(a, b);
        }
        this.reset(mark);
        if ((a = this._gather_7()) && (literal = this.expect(",")) && (literal_1 = this.expect("**")) && (b = this.expression())) {
            return pegen.seq_append_to_end(a, b);
        }
        this.reset(mark);
        if ((literal = this.expect("*")) && (a = this.expression()) && (literal_1 = this.expect(",")) && (literal_2 = this.expect("**")) && (b = this.expression())) {
            return pegen.seq_append_to_end(pegen.singleton_seq(a), b);
        }
        this.reset(mark);
        if ((literal = this.expect("*")) && (a = this.expression())) {
            return pegen.singleton_seq(a);
        }
        this.reset(mark);
        if ((literal = this.expect("**")) && (a = this.expression())) {
            return pegen.singleton_seq(a);
        }
        this.reset(mark);
        if ((a = this._gather_9())) {
            return a;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    statements() {
        //# statements: statement+
        let a, mark;
        mark = this.mark();
        if ((a = this._loop1_11())) {
            return pegen.seq_flatten(a);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    statement() {
        //# statement: compound_stmt | simple_stmts
        let a, mark;
        mark = this.mark();
        if ((a = this.compound_stmt())) {
            return pegen.singleton_seq(a);
        }
        this.reset(mark);
        if ((a = this.simple_stmts())) {
            return a;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    statement_newline() {
        //# statement_newline: compound_stmt NEWLINE | simple_stmts | NEWLINE | $
        let a, endmarker, mark, newline, simple_stmts;
        mark = this.mark();
        if ((a = this.compound_stmt()) && (newline = this.expect("NEWLINE"))) {
            return pegen.singleton_seq(a);
        }
        this.reset(mark);
        if ((simple_stmts = this.simple_stmts())) {
            return simple_stmts;
        }
        this.reset(mark);
        if ((newline = this.expect("NEWLINE"))) {
            return pegen.singleton_seq(new astnodes.Pass(...EXTRA));
        }
        this.reset(mark);
        if ((endmarker = this.expect("ENDMARKER"))) {
            return pegen.interactive_exit(p);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    simple_stmts() {
        //# simple_stmts: simple_stmt !';' NEWLINE | ';'.simple_stmt+ ';'? NEWLINE
        let a, mark, newline, opt;
        mark = this.mark();
        if ((a = this.simple_stmt()) && this.negative_lookahead(this.expect, ";") && (newline = this.expect("NEWLINE"))) {
            return pegen.singleton_seq(a);
        }
        this.reset(mark);
        if ((a = this._gather_12()) && (opt = this.expect(";")) && (newline = this.expect("NEWLINE"))) {
            return a;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    simple_stmt() {
        //# simple_stmt: assignment | star_expressions | &'return' return_stmt | &('import' | 'from') import_stmt | &'raise' raise_stmt | 'pass' | &'del' del_stmt | &'yield' yield_stmt | &'assert' assert_stmt | 'break' | 'continue' | &'global' global_stmt | &'nonlocal' nonlocal_stmt
        let assert_stmt, assignment, del_stmt, e, global_stmt, import_stmt, literal, mark, nonlocal_stmt, raise_stmt, return_stmt, yield_stmt;
        mark = this.mark();
        if ((assignment = this.assignment())) {
            return assignment;
        }
        this.reset(mark);
        if ((e = this.star_expressions())) {
            return new astnodes.Expr(e, ...EXTRA);
        }
        this.reset(mark);
        if (this.positive_lookahead(this.expect, "return") && (return_stmt = this.return_stmt())) {
            return return_stmt;
        }
        this.reset(mark);
        if (this.positive_lookahead(this._tmp_14) && (import_stmt = this.import_stmt())) {
            return import_stmt;
        }
        this.reset(mark);
        if (this.positive_lookahead(this.expect, "raise") && (raise_stmt = this.raise_stmt())) {
            return raise_stmt;
        }
        this.reset(mark);
        if ((literal = this.expect("pass"))) {
            return new astnodes.Pass(...EXTRA);
        }
        this.reset(mark);
        if (this.positive_lookahead(this.expect, "del") && (del_stmt = this.del_stmt())) {
            return del_stmt;
        }
        this.reset(mark);
        if (this.positive_lookahead(this.expect, "yield") && (yield_stmt = this.yield_stmt())) {
            return yield_stmt;
        }
        this.reset(mark);
        if (this.positive_lookahead(this.expect, "assert") && (assert_stmt = this.assert_stmt())) {
            return assert_stmt;
        }
        this.reset(mark);
        if ((literal = this.expect("break"))) {
            return new astnodes.Break(...EXTRA);
        }
        this.reset(mark);
        if ((literal = this.expect("continue"))) {
            return new astnodes.Continue(...EXTRA);
        }
        this.reset(mark);
        if (this.positive_lookahead(this.expect, "global") && (global_stmt = this.global_stmt())) {
            return global_stmt;
        }
        this.reset(mark);
        if (this.positive_lookahead(this.expect, "nonlocal") && (nonlocal_stmt = this.nonlocal_stmt())) {
            return nonlocal_stmt;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    compound_stmt() {
        //# compound_stmt: &('def' | '@' | ASYNC) function_def | &'if' if_stmt | &('class' | '@') class_def | &('with' | ASYNC) with_stmt | &('for' | ASYNC) for_stmt | &'try' try_stmt | &'while' while_stmt
        let class_def, for_stmt, function_def, if_stmt, mark, try_stmt, while_stmt, with_stmt;
        mark = this.mark();
        if (this.positive_lookahead(this._tmp_15) && (function_def = this.function_def())) {
            return function_def;
        }
        this.reset(mark);
        if (this.positive_lookahead(this.expect, "if") && (if_stmt = this.if_stmt())) {
            return if_stmt;
        }
        this.reset(mark);
        if (this.positive_lookahead(this._tmp_16) && (class_def = this.class_def())) {
            return class_def;
        }
        this.reset(mark);
        if (this.positive_lookahead(this._tmp_17) && (with_stmt = this.with_stmt())) {
            return with_stmt;
        }
        this.reset(mark);
        if (this.positive_lookahead(this._tmp_18) && (for_stmt = this.for_stmt())) {
            return for_stmt;
        }
        this.reset(mark);
        if (this.positive_lookahead(this.expect, "try") && (try_stmt = this.try_stmt())) {
            return try_stmt;
        }
        this.reset(mark);
        if (this.positive_lookahead(this.expect, "while") && (while_stmt = this.while_stmt())) {
            return while_stmt;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    assignment() {
        //# assignment: NAME ':' expression ['=' annotated_rhs] | ('(' single_target ')' | single_subscript_attribute_target) ':' expression ['=' annotated_rhs] | ((star_targets '='))+ (yield_expr | star_expressions) !'=' TYPE_COMMENT? | single_target augassign ~ (yield_expr | star_expressions) | invalid_assignment
        let a, b, c, cut, invalid_assignment, literal, mark, tc;
        mark = this.mark();
        if ((a = this.name()) && (literal = this.expect(":")) && (b = this.expression()) && (c = this._tmp_19())) {
            return CHECK_VERSION(6, "Variable annotation syntax is", new astnodes.AnnAssign(pegen.set_expr_context(a, new astnodes.Store()), b, c, 1, ...EXTRA));
        }
        this.reset(mark);
        if ((a = this._tmp_20()) && (literal = this.expect(":")) && (b = this.expression()) && (c = this._tmp_21())) {
            return CHECK_VERSION(6, "Variable annotations syntax is", new astnodes.AnnAssign(a, b, c, 0, ...EXTRA));
        }
        this.reset(mark);
        if ((a = this._loop1_22()) && (b = this._tmp_23()) && this.negative_lookahead(this.expect, "=") && (tc = this.TYPE_COMMENT())) {
            return new astnodes.Assign(a, b, NEW_TYPE_COMMENT(tc), ...EXTRA);
        }
        this.reset(mark);
        if ((a = this.single_target()) && (b = this.augassign()) && (cut = true) && (c = this._tmp_24())) {
            return new astnodes.AugAssign(a, b.kind, c, ...EXTRA);
        }
        this.reset(mark);
        if (cut) return null;
        cut = false;
        if ((invalid_assignment = this.invalid_assignment())) {
            return invalid_assignment;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    augassign() {
        //# augassign: '+=' | '-=' | '*=' | '@=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '**=' | '//='
        let literal, mark;
        mark = this.mark();
        if ((literal = this.expect("+="))) {
            return new astnodes.Add();
        }
        this.reset(mark);
        if ((literal = this.expect("-="))) {
            return new astnodes.Sub();
        }
        this.reset(mark);
        if ((literal = this.expect("*="))) {
            return new astnodes.Mult();
        }
        this.reset(mark);
        if ((literal = this.expect("@="))) {
            return CHECK_VERSION(new astnodes.AugOperator(), 5, "The '@' operator is", new astnodes.MatMult());
        }
        this.reset(mark);
        if ((literal = this.expect("/="))) {
            return new astnodes.Div();
        }
        this.reset(mark);
        if ((literal = this.expect("%="))) {
            return new astnodes.Mod();
        }
        this.reset(mark);
        if ((literal = this.expect("&="))) {
            return new astnodes.BitAnd();
        }
        this.reset(mark);
        if ((literal = this.expect("|="))) {
            return new astnodes.BitOr();
        }
        this.reset(mark);
        if ((literal = this.expect("^="))) {
            return new astnodes.BitXor();
        }
        this.reset(mark);
        if ((literal = this.expect("<<="))) {
            return new astnodes.LShift();
        }
        this.reset(mark);
        if ((literal = this.expect(">>="))) {
            return new astnodes.RShift();
        }
        this.reset(mark);
        if ((literal = this.expect("**="))) {
            return new astnodes.Pow();
        }
        this.reset(mark);
        if ((literal = this.expect("//="))) {
            return new astnodes.FloorDiv();
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    global_stmt() {
        //# global_stmt: 'global' ','.NAME+
        let a, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("global")) && (a = this._gather_25())) {
            return new astnodes.Global(pegen.map_names_to_ids(a), ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    nonlocal_stmt() {
        //# nonlocal_stmt: 'nonlocal' ','.NAME+
        let a, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("nonlocal")) && (a = this._gather_27())) {
            return new astnodes.Nonlocal(pegen.map_names_to_ids(a), ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    yield_stmt() {
        //# yield_stmt: yield_expr
        let mark, y;
        mark = this.mark();
        if ((y = this.yield_expr())) {
            return new astnodes.Expr(y, ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    assert_stmt() {
        //# assert_stmt: 'assert' expression [',' expression]
        let a, b, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("assert")) && (a = this.expression()) && (b = this._tmp_29())) {
            return new astnodes.Assert(a, b, ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    del_stmt() {
        //# del_stmt: 'del' del_targets &(';' | NEWLINE) | invalid_del_stmt
        let a, invalid_del_stmt, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("del")) && (a = this.del_targets()) && this.positive_lookahead(this._tmp_30)) {
            return new astnodes.Delete(a, ...EXTRA);
        }
        this.reset(mark);
        if ((invalid_del_stmt = this.invalid_del_stmt())) {
            return invalid_del_stmt;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    import_stmt() {
        //# import_stmt: import_name | import_from
        let import_from, import_name, mark;
        mark = this.mark();
        if ((import_name = this.import_name())) {
            return import_name;
        }
        this.reset(mark);
        if ((import_from = this.import_from())) {
            return import_from;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    import_name() {
        //# import_name: 'import' dotted_as_names
        let a, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("import")) && (a = this.dotted_as_names())) {
            return new astnodes.Import(a, ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    import_from() {
        //# import_from: 'from' (('.' | '...'))* dotted_name 'import' import_from_targets | 'from' (('.' | '...'))+ 'import' import_from_targets
        let a, b, c, literal, literal_1, mark;
        mark = this.mark();
        if (
            (literal = this.expect("from")) &&
            (a = this._loop0_31()) &&
            (b = this.dotted_name()) &&
            (literal_1 = this.expect("import")) &&
            (c = this.import_from_targets())
        ) {
            return new astnodes.ImportFrom(b.id, c, pegen.seq_count_dots(a), ...EXTRA);
        }
        this.reset(mark);
        if ((literal = this.expect("from")) && (a = this._loop1_32()) && (literal_1 = this.expect("import")) && (b = this.import_from_targets())) {
            return new astnodes.ImportFrom(null, b, pegen.seq_count_dots(a), ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    import_from_targets() {
        //# import_from_targets: '(' import_from_as_names ','? ')' | import_from_as_names !',' | '*' | invalid_import_from_targets
        let a, import_from_as_names, invalid_import_from_targets, literal, literal_1, mark, opt;
        mark = this.mark();
        if ((literal = this.expect("(")) && (a = this.import_from_as_names()) && (opt = this.expect(",")) && (literal_1 = this.expect(")"))) {
            return a;
        }
        this.reset(mark);
        if ((import_from_as_names = this.import_from_as_names()) && this.negative_lookahead(this.expect, ",")) {
            return import_from_as_names;
        }
        this.reset(mark);
        if ((literal = this.expect("*"))) {
            return pegen.singleton_seq((alias_ty, pegen.alias_for_star(p)));
        }
        this.reset(mark);
        if ((invalid_import_from_targets = this.invalid_import_from_targets())) {
            return invalid_import_from_targets;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    import_from_as_names() {
        //# import_from_as_names: ','.import_from_as_name+
        let a, mark;
        mark = this.mark();
        if ((a = this._gather_33())) {
            return a;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    import_from_as_name() {
        //# import_from_as_name: NAME ['as' NAME]
        let a, b, mark;
        mark = this.mark();
        if ((a = this.name()) && (b = this._tmp_35())) {
            return new astnodes.alias(a.id, b.id);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    dotted_as_names() {
        //# dotted_as_names: ','.dotted_as_name+
        let a, mark;
        mark = this.mark();
        if ((a = this._gather_36())) {
            return a;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    dotted_as_name() {
        //# dotted_as_name: dotted_name ['as' NAME]
        let a, b, mark;
        mark = this.mark();
        if ((a = this.dotted_name()) && (b = this._tmp_38())) {
            return new astnodes.alias(a.id, b.id);
        }
        this.reset(mark);

        return null;
    }

    // @memoize_left_rec
    dotted_name() {
        //# dotted_name: dotted_name '.' NAME | NAME
        let a, b, literal, mark, name;
        mark = this.mark();
        if ((a = this.dotted_name()) && (literal = this.expect(".")) && (b = this.name())) {
            return pegen.join_names_with_dot(a, b);
        }
        this.reset(mark);
        if ((name = this.name())) {
            return name;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    if_stmt() {
        //# if_stmt: 'if' named_expression ':' block elif_stmt | 'if' named_expression ':' block else_block?
        let a, b, c, literal, literal_1, mark;
        mark = this.mark();
        if ((literal = this.expect("if")) && (a = this.named_expression()) && (literal_1 = this.expect(":")) && (b = this.block()) && (c = this.elif_stmt())) {
            return new astnodes.If(a, b, pegen.singleton_seq(c), ...EXTRA);
        }
        this.reset(mark);
        if ((literal = this.expect("if")) && (a = this.named_expression()) && (literal_1 = this.expect(":")) && (b = this.block()) && (c = this.else_block())) {
            return new astnodes.If(a, b, c, ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    elif_stmt() {
        //# elif_stmt: 'elif' named_expression ':' block elif_stmt | 'elif' named_expression ':' block else_block?
        let a, b, c, literal, literal_1, mark;
        mark = this.mark();
        if ((literal = this.expect("elif")) && (a = this.named_expression()) && (literal_1 = this.expect(":")) && (b = this.block()) && (c = this.elif_stmt())) {
            return new astnodes.If(a, b, pegen.singleton_seq(c), ...EXTRA);
        }
        this.reset(mark);
        if ((literal = this.expect("elif")) && (a = this.named_expression()) && (literal_1 = this.expect(":")) && (b = this.block()) && (c = this.else_block())) {
            return new astnodes.If(a, b, c, ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    else_block() {
        //# else_block: 'else' ':' block
        let b, literal, literal_1, mark;
        mark = this.mark();
        if ((literal = this.expect("else")) && (literal_1 = this.expect(":")) && (b = this.block())) {
            return b;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    while_stmt() {
        //# while_stmt: 'while' named_expression ':' block else_block?
        let a, b, c, literal, literal_1, mark;
        mark = this.mark();
        if ((literal = this.expect("while")) && (a = this.named_expression()) && (literal_1 = this.expect(":")) && (b = this.block()) && (c = this.else_block())) {
            return new astnodes.While(a, b, c, ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    for_stmt() {
        //# for_stmt: 'for' star_targets 'in' ~ star_expressions ':' TYPE_COMMENT? block else_block? | ASYNC 'for' star_targets 'in' ~ star_expressions ':' TYPE_COMMENT? block else_block? | invalid_for_target
        let async, b, cut, el, ex, invalid_for_target, literal, literal_1, literal_2, mark, t, tc;
        mark = this.mark();
        if (
            (literal = this.expect("for")) &&
            (t = this.star_targets()) &&
            (literal_1 = this.expect("in")) &&
            (cut = true) &&
            (ex = this.star_expressions()) &&
            (literal_2 = this.expect(":")) &&
            (tc = this.TYPE_COMMENT()) &&
            (b = this.block()) &&
            (el = this.else_block())
        ) {
            return new astnodes.For(t, ex, b, el, NEW_TYPE_COMMENT(tc), ...EXTRA);
        }
        this.reset(mark);
        if (cut) return null;
        cut = false;
        if (
            (async = this.expect("ASYNC")) &&
            (literal = this.expect("for")) &&
            (t = this.star_targets()) &&
            (literal_1 = this.expect("in")) &&
            (cut = true) &&
            (ex = this.star_expressions()) &&
            (literal_2 = this.expect(":")) &&
            (tc = this.TYPE_COMMENT()) &&
            (b = this.block()) &&
            (el = this.else_block())
        ) {
            return CHECK_VERSION(5, "Async for loops are", new astnodes.AsyncFor(t, ex, b, el, NEW_TYPE_COMMENT(tc), ...EXTRA));
        }
        this.reset(mark);
        if (cut) return null;
        cut = false;
        if ((invalid_for_target = this.invalid_for_target())) {
            return invalid_for_target;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    with_stmt() {
        //# with_stmt: 'with' '(' ','.with_item+ ','? ')' ':' block | 'with' ','.with_item+ ':' TYPE_COMMENT? block | ASYNC 'with' '(' ','.with_item+ ','? ')' ':' block | ASYNC 'with' ','.with_item+ ':' TYPE_COMMENT? block
        let a, async, b, literal, literal_1, literal_2, literal_3, mark, opt, tc;
        mark = this.mark();
        if (
            (literal = this.expect("with")) &&
            (literal_1 = this.expect("(")) &&
            (a = this._gather_39()) &&
            (opt = this.expect(",")) &&
            (literal_2 = this.expect(")")) &&
            (literal_3 = this.expect(":")) &&
            (b = this.block())
        ) {
            return new astnodes.With(a, b, null, ...EXTRA);
        }
        this.reset(mark);
        if ((literal = this.expect("with")) && (a = this._gather_41()) && (literal_1 = this.expect(":")) && (tc = this.TYPE_COMMENT()) && (b = this.block())) {
            return new astnodes.With(a, b, NEW_TYPE_COMMENT(tc), ...EXTRA);
        }
        this.reset(mark);
        if (
            (async = this.expect("ASYNC")) &&
            (literal = this.expect("with")) &&
            (literal_1 = this.expect("(")) &&
            (a = this._gather_43()) &&
            (opt = this.expect(",")) &&
            (literal_2 = this.expect(")")) &&
            (literal_3 = this.expect(":")) &&
            (b = this.block())
        ) {
            return CHECK_VERSION(5, "Async with statements are", new astnodes.AsyncWith(a, b, null, ...EXTRA));
        }
        this.reset(mark);
        if (
            (async = this.expect("ASYNC")) &&
            (literal = this.expect("with")) &&
            (a = this._gather_45()) &&
            (literal_1 = this.expect(":")) &&
            (tc = this.TYPE_COMMENT()) &&
            (b = this.block())
        ) {
            return CHECK_VERSION(5, "Async with statements are", new astnodes.AsyncWith(a, b, NEW_TYPE_COMMENT(tc), ...EXTRA));
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    with_item() {
        //# with_item: expression 'as' star_target &(',' | ')' | ':') | invalid_with_item | expression
        let e, invalid_with_item, literal, mark, t;
        mark = this.mark();
        if ((e = this.expression()) && (literal = this.expect("as")) && (t = this.star_target()) && this.positive_lookahead(this._tmp_47)) {
            return new astnodes.withitem(e, t);
        }
        this.reset(mark);
        if ((invalid_with_item = this.invalid_with_item())) {
            return invalid_with_item;
        }
        this.reset(mark);
        if ((e = this.expression())) {
            return new astnodes.withitem(e, null);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    try_stmt() {
        //# try_stmt: 'try' ':' block finally_block | 'try' ':' block except_block+ else_block? finally_block?
        let b, el, ex, f, literal, literal_1, mark;
        mark = this.mark();
        if ((literal = this.expect("try")) && (literal_1 = this.expect(":")) && (b = this.block()) && (f = this.finally_block())) {
            return new astnodes.Try(b, null, null, f, ...EXTRA);
        }
        this.reset(mark);
        if (
            (literal = this.expect("try")) &&
            (literal_1 = this.expect(":")) &&
            (b = this.block()) &&
            (ex = this._loop1_48()) &&
            (el = this.else_block()) &&
            (f = this.finally_block())
        ) {
            return new astnodes.Try(b, ex, el, f, ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    except_block() {
        //# except_block: 'except' expression ['as' NAME] ':' block | 'except' ':' block
        let b, e, literal, literal_1, mark, t;
        mark = this.mark();
        if ((literal = this.expect("except")) && (e = this.expression()) && (t = this._tmp_49()) && (literal_1 = this.expect(":")) && (b = this.block())) {
            return new astnodes.ExceptHandler(e, t.id, b, ...EXTRA);
        }
        this.reset(mark);
        if ((literal = this.expect("except")) && (literal_1 = this.expect(":")) && (b = this.block())) {
            return new astnodes.ExceptHandler(null, null, b, ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    finally_block() {
        //# finally_block: 'finally' ':' block
        let a, literal, literal_1, mark;
        mark = this.mark();
        if ((literal = this.expect("finally")) && (literal_1 = this.expect(":")) && (a = this.block())) {
            return a;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    return_stmt() {
        //# return_stmt: 'return' star_expressions?
        let a, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("return")) && (a = this.star_expressions())) {
            return new astnodes.Return(a, ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    raise_stmt() {
        //# raise_stmt: 'raise' expression ['from' expression] | 'raise'
        let a, b, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("raise")) && (a = this.expression()) && (b = this._tmp_50())) {
            return new astnodes.Raise(a, b, ...EXTRA);
        }
        this.reset(mark);
        if ((literal = this.expect("raise"))) {
            return new astnodes.Raise(null, null, ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    function_def() {
        //# function_def: decorators function_def_raw | function_def_raw
        let d, f, function_def_raw, mark;
        mark = this.mark();
        if ((d = this.decorators()) && (f = this.function_def_raw())) {
            return pegen.function_def_decorators(d, f);
        }
        this.reset(mark);
        if ((function_def_raw = this.function_def_raw())) {
            return function_def_raw;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    function_def_raw() {
        //# function_def_raw: 'def' NAME '(' params? ')' ['->' expression] ':' func_type_comment? block | ASYNC 'def' NAME '(' params? ')' ['->' expression] ':' func_type_comment? block
        let a, async, b, literal, literal_1, literal_2, literal_3, mark, n, params, tc;
        mark = this.mark();
        if (
            (literal = this.expect("def")) &&
            (n = this.name()) &&
            (literal_1 = this.expect("(")) &&
            (params = this.params()) &&
            (literal_2 = this.expect(")")) &&
            (a = this._tmp_51()) &&
            (literal_3 = this.expect(":")) &&
            (tc = this.func_type_comment()) &&
            (b = this.block())
        ) {
            return new astnodes.FunctionDef(n.id, params ? params : (arguments_ty, pegen.empty_arguments(p)), b, null, a, NEW_TYPE_COMMENT(tc), ...EXTRA);
        }
        this.reset(mark);
        if (
            (async = this.expect("ASYNC")) &&
            (literal = this.expect("def")) &&
            (n = this.name()) &&
            (literal_1 = this.expect("(")) &&
            (params = this.params()) &&
            (literal_2 = this.expect(")")) &&
            (a = this._tmp_52()) &&
            (literal_3 = this.expect(":")) &&
            (tc = this.func_type_comment()) &&
            (b = this.block())
        ) {
            return CHECK_VERSION(
                5,
                "Async functions are",
                new astnodes.AsyncFunctionDef(n.id, params ? params : (arguments_ty, pegen.empty_arguments(p)), b, null, a, NEW_TYPE_COMMENT(tc), ...EXTRA)
            );
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    func_type_comment() {
        //# func_type_comment: NEWLINE TYPE_COMMENT &(NEWLINE INDENT) | invalid_double_type_comments | TYPE_COMMENT
        let TYPE_COMMENT, invalid_double_type_comments, mark, newline, t;
        mark = this.mark();
        if ((newline = this.expect("NEWLINE")) && (t = this.TYPE_COMMENT()) && this.positive_lookahead(this._tmp_53)) {
            return t;
        }
        this.reset(mark);
        if ((invalid_double_type_comments = this.invalid_double_type_comments())) {
            return invalid_double_type_comments;
        }
        this.reset(mark);
        if ((TYPE_COMMENT = this.TYPE_COMMENT())) {
            return TYPE_COMMENT;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    params() {
        //# params: invalid_parameters | parameters
        let invalid_parameters, mark, parameters;
        mark = this.mark();
        if ((invalid_parameters = this.invalid_parameters())) {
            return invalid_parameters;
        }
        this.reset(mark);
        if ((parameters = this.parameters())) {
            return parameters;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    parameters() {
        //# parameters: slash_no_default param_no_default* param_with_default* star_etc? | slash_with_default param_with_default* star_etc? | param_no_default+ param_with_default* star_etc? | param_with_default+ star_etc? | star_etc
        let a, b, c, d, mark;
        mark = this.mark();
        if ((a = this.slash_no_default()) && (b = this._loop0_54()) && (c = this._loop0_55()) && (d = this.star_etc())) {
            return pegen.make_arguments(a, null, b, c, d);
        }
        this.reset(mark);
        if ((a = this.slash_with_default()) && (b = this._loop0_56()) && (c = this.star_etc())) {
            return pegen.make_arguments(null, a, null, b, c);
        }
        this.reset(mark);
        if ((a = this._loop1_57()) && (b = this._loop0_58()) && (c = this.star_etc())) {
            return pegen.make_arguments(null, null, a, b, c);
        }
        this.reset(mark);
        if ((a = this._loop1_59()) && (b = this.star_etc())) {
            return pegen.make_arguments(null, null, null, a, b);
        }
        this.reset(mark);
        if ((a = this.star_etc())) {
            return pegen.make_arguments(null, null, null, null, a);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    slash_no_default() {
        //# slash_no_default: param_no_default+ '/' ',' | param_no_default+ '/' &')'
        let a, literal, literal_1, mark;
        mark = this.mark();
        if ((a = this._loop1_60()) && (literal = this.expect("/")) && (literal_1 = this.expect(","))) {
            return a;
        }
        this.reset(mark);
        if ((a = this._loop1_61()) && (literal = this.expect("/")) && this.positive_lookahead(this.expect, ")")) {
            return a;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    slash_with_default() {
        //# slash_with_default: param_no_default* param_with_default+ '/' ',' | param_no_default* param_with_default+ '/' &')'
        let a, b, literal, literal_1, mark;
        mark = this.mark();
        if ((a = this._loop0_62()) && (b = this._loop1_63()) && (literal = this.expect("/")) && (literal_1 = this.expect(","))) {
            return pegen.slash_with_default(a, b);
        }
        this.reset(mark);
        if ((a = this._loop0_64()) && (b = this._loop1_65()) && (literal = this.expect("/")) && this.positive_lookahead(this.expect, ")")) {
            return pegen.slash_with_default(a, b);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    star_etc() {
        //# star_etc: '*' param_no_default param_maybe_default* kwds? | '*' ',' param_maybe_default+ kwds? | kwds | invalid_star_etc
        let a, b, c, invalid_star_etc, literal, literal_1, mark;
        mark = this.mark();
        if ((literal = this.expect("*")) && (a = this.param_no_default()) && (b = this._loop0_66()) && (c = this.kwds())) {
            return pegen.star_etc(a, b, c);
        }
        this.reset(mark);
        if ((literal = this.expect("*")) && (literal_1 = this.expect(",")) && (b = this._loop1_67()) && (c = this.kwds())) {
            return pegen.star_etc(null, b, c);
        }
        this.reset(mark);
        if ((a = this.kwds())) {
            return pegen.star_etc(null, null, a);
        }
        this.reset(mark);
        if ((invalid_star_etc = this.invalid_star_etc())) {
            return invalid_star_etc;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    kwds() {
        //# kwds: '**' param_no_default
        let a, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("**")) && (a = this.param_no_default())) {
            return a;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    param_no_default() {
        //# param_no_default: param ',' TYPE_COMMENT? | param TYPE_COMMENT? &')'
        let a, literal, mark, tc;
        mark = this.mark();
        if ((a = this.param()) && (literal = this.expect(",")) && (tc = this.TYPE_COMMENT())) {
            return pegen.add_type_comment_to_arg(a, tc);
        }
        this.reset(mark);
        if ((a = this.param()) && (tc = this.TYPE_COMMENT()) && this.positive_lookahead(this.expect, ")")) {
            return pegen.add_type_comment_to_arg(a, tc);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    param_with_default() {
        //# param_with_default: param default ',' TYPE_COMMENT? | param default TYPE_COMMENT? &')'
        let a, c, literal, mark, tc;
        mark = this.mark();
        if ((a = this.param()) && (c = this.default()) && (literal = this.expect(",")) && (tc = this.TYPE_COMMENT())) {
            return pegen.name_default_pair(a, c, tc);
        }
        this.reset(mark);
        if ((a = this.param()) && (c = this.default()) && (tc = this.TYPE_COMMENT()) && this.positive_lookahead(this.expect, ")")) {
            return pegen.name_default_pair(a, c, tc);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    param_maybe_default() {
        //# param_maybe_default: param default? ',' TYPE_COMMENT? | param default? TYPE_COMMENT? &')'
        let a, c, literal, mark, tc;
        mark = this.mark();
        if ((a = this.param()) && (c = this.default()) && (literal = this.expect(",")) && (tc = this.TYPE_COMMENT())) {
            return pegen.name_default_pair(a, c, tc);
        }
        this.reset(mark);
        if ((a = this.param()) && (c = this.default()) && (tc = this.TYPE_COMMENT()) && this.positive_lookahead(this.expect, ")")) {
            return pegen.name_default_pair(a, c, tc);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    param() {
        //# param: NAME annotation?
        let a, b, mark;
        mark = this.mark();
        if ((a = this.name()) && (b = this.annotation())) {
            return new astnodes.arg(a.id, b, null, ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    annotation() {
        //# annotation: ':' expression
        let a, literal, mark;
        mark = this.mark();
        if ((literal = this.expect(":")) && (a = this.expression())) {
            return a;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    default() {
        //# default: '=' expression
        let a, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("=")) && (a = this.expression())) {
            return a;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    decorators() {
        //# decorators: (('@' named_expression NEWLINE))+
        let a, mark;
        mark = this.mark();
        if ((a = this._loop1_68())) {
            return a;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    class_def() {
        //# class_def: decorators class_def_raw | class_def_raw
        let a, b, class_def_raw, mark;
        mark = this.mark();
        if ((a = this.decorators()) && (b = this.class_def_raw())) {
            return pegen.class_def_decorators(a, b);
        }
        this.reset(mark);
        if ((class_def_raw = this.class_def_raw())) {
            return class_def_raw;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    class_def_raw() {
        //# class_def_raw: 'class' NAME ['(' arguments? ')'] ':' block
        let a, b, c, literal, literal_1, mark;
        mark = this.mark();
        if ((literal = this.expect("class")) && (a = this.name()) && (b = this._tmp_69()) && (literal_1 = this.expect(":")) && (c = this.block())) {
            return new astnodes.ClassDef(a.id, b.args, b.keywords, c, null, ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    block() {
        //# block: NEWLINE INDENT statements DEDENT | simple_stmts | invalid_block
        let a, dedent, indent, invalid_block, mark, newline, simple_stmts;
        mark = this.mark();
        if ((newline = this.expect("NEWLINE")) && (indent = this.expect("INDENT")) && (a = this.statements()) && (dedent = this.expect("DEDENT"))) {
            return a;
        }
        this.reset(mark);
        if ((simple_stmts = this.simple_stmts())) {
            return simple_stmts;
        }
        this.reset(mark);
        if ((invalid_block = this.invalid_block())) {
            return invalid_block;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    star_expressions() {
        //# star_expressions: star_expression ((',' star_expression))+ ','? | star_expression ',' | star_expression
        let a, b, literal, mark, opt, star_expression;
        mark = this.mark();
        if ((a = this.star_expression()) && (b = this._loop1_70()) && (opt = this.expect(","))) {
            return new astnodes.Tuple(pegen.seq_insert_in_front(a, b), new astnodes.Load(), ...EXTRA);
        }
        this.reset(mark);
        if ((a = this.star_expression()) && (literal = this.expect(","))) {
            return new astnodes.Tuple(pegen.singleton_seq(a), new astnodes.Load(), ...EXTRA);
        }
        this.reset(mark);
        if ((star_expression = this.star_expression())) {
            return star_expression;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    star_expression() {
        //# star_expression: '*' bitwise_or | expression
        let a, expression, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("*")) && (a = this.bitwise_or())) {
            return new astnodes.Starred(a, new astnodes.Load(), ...EXTRA);
        }
        this.reset(mark);
        if ((expression = this.expression())) {
            return expression;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    star_named_expressions() {
        //# star_named_expressions: ','.star_named_expression+ ','?
        let a, mark, opt;
        mark = this.mark();
        if ((a = this._gather_71()) && (opt = this.expect(","))) {
            return a;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    star_named_expression() {
        //# star_named_expression: '*' bitwise_or | named_expression
        let a, literal, mark, named_expression;
        mark = this.mark();
        if ((literal = this.expect("*")) && (a = this.bitwise_or())) {
            return new astnodes.Starred(a, new astnodes.Load(), ...EXTRA);
        }
        this.reset(mark);
        if ((named_expression = this.named_expression())) {
            return named_expression;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    named_expression() {
        //# named_expression: NAME ':=' ~ expression | expression !':=' | invalid_named_expression
        let a, b, cut, expression, invalid_named_expression, literal, mark;
        mark = this.mark();
        if ((a = this.name()) && (literal = this.expect(":=")) && (cut = true) && (b = this.expression())) {
            return new astnodes.NamedExpr(pegen.set_expr_context(a, new astnodes.Store()), b, ...EXTRA);
        }
        this.reset(mark);
        if (cut) return null;
        cut = false;
        if ((expression = this.expression()) && this.negative_lookahead(this.expect, ":=")) {
            return expression;
        }
        this.reset(mark);
        if ((invalid_named_expression = this.invalid_named_expression())) {
            return invalid_named_expression;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    annotated_rhs() {
        //# annotated_rhs: yield_expr | star_expressions
        let mark, star_expressions, yield_expr;
        mark = this.mark();
        if ((yield_expr = this.yield_expr())) {
            return yield_expr;
        }
        this.reset(mark);
        if ((star_expressions = this.star_expressions())) {
            return star_expressions;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    expressions() {
        //# expressions: expression ((',' expression))+ ','? | expression ',' | expression
        let a, b, expression, literal, mark, opt;
        mark = this.mark();
        if ((a = this.expression()) && (b = this._loop1_73()) && (opt = this.expect(","))) {
            return new astnodes.Tuple(pegen.seq_insert_in_front(a, b), new astnodes.Load(), ...EXTRA);
        }
        this.reset(mark);
        if ((a = this.expression()) && (literal = this.expect(","))) {
            return new astnodes.Tuple(pegen.singleton_seq(a), new astnodes.Load(), ...EXTRA);
        }
        this.reset(mark);
        if ((expression = this.expression())) {
            return expression;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    expression() {
        //# expression: disjunction 'if' disjunction 'else' expression | disjunction | lambdef
        let a, b, c, disjunction, lambdef, literal, literal_1, mark;
        mark = this.mark();
        if ((a = this.disjunction()) && (literal = this.expect("if")) && (b = this.disjunction()) && (literal_1 = this.expect("else")) && (c = this.expression())) {
            return new astnodes.IfExp(b, a, c, ...EXTRA);
        }
        this.reset(mark);
        if ((disjunction = this.disjunction())) {
            return disjunction;
        }
        this.reset(mark);
        if ((lambdef = this.lambdef())) {
            return lambdef;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    lambdef() {
        //# lambdef: 'lambda' lambda_params? ':' expression
        let a, b, literal, literal_1, mark;
        mark = this.mark();
        if ((literal = this.expect("lambda")) && (a = this.lambda_params()) && (literal_1 = this.expect(":")) && (b = this.expression())) {
            return new astnodes.Lambda(a ? a : (arguments_ty, pegen.empty_arguments(p)), b, ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    lambda_params() {
        //# lambda_params: invalid_lambda_parameters | lambda_parameters
        let invalid_lambda_parameters, lambda_parameters, mark;
        mark = this.mark();
        if ((invalid_lambda_parameters = this.invalid_lambda_parameters())) {
            return invalid_lambda_parameters;
        }
        this.reset(mark);
        if ((lambda_parameters = this.lambda_parameters())) {
            return lambda_parameters;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    lambda_parameters() {
        //# lambda_parameters: lambda_slash_no_default lambda_param_no_default* lambda_param_with_default* lambda_star_etc? | lambda_slash_with_default lambda_param_with_default* lambda_star_etc? | lambda_param_no_default+ lambda_param_with_default* lambda_star_etc? | lambda_param_with_default+ lambda_star_etc? | lambda_star_etc
        let a, b, c, d, mark;
        mark = this.mark();
        if ((a = this.lambda_slash_no_default()) && (b = this._loop0_74()) && (c = this._loop0_75()) && (d = this.lambda_star_etc())) {
            return pegen.make_arguments(a, null, b, c, d);
        }
        this.reset(mark);
        if ((a = this.lambda_slash_with_default()) && (b = this._loop0_76()) && (c = this.lambda_star_etc())) {
            return pegen.make_arguments(null, a, null, b, c);
        }
        this.reset(mark);
        if ((a = this._loop1_77()) && (b = this._loop0_78()) && (c = this.lambda_star_etc())) {
            return pegen.make_arguments(null, null, a, b, c);
        }
        this.reset(mark);
        if ((a = this._loop1_79()) && (b = this.lambda_star_etc())) {
            return pegen.make_arguments(null, null, null, a, b);
        }
        this.reset(mark);
        if ((a = this.lambda_star_etc())) {
            return pegen.make_arguments(null, null, null, null, a);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    lambda_slash_no_default() {
        //# lambda_slash_no_default: lambda_param_no_default+ '/' ',' | lambda_param_no_default+ '/' &':'
        let a, literal, literal_1, mark;
        mark = this.mark();
        if ((a = this._loop1_80()) && (literal = this.expect("/")) && (literal_1 = this.expect(","))) {
            return a;
        }
        this.reset(mark);
        if ((a = this._loop1_81()) && (literal = this.expect("/")) && this.positive_lookahead(this.expect, ":")) {
            return a;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    lambda_slash_with_default() {
        //# lambda_slash_with_default: lambda_param_no_default* lambda_param_with_default+ '/' ',' | lambda_param_no_default* lambda_param_with_default+ '/' &':'
        let a, b, literal, literal_1, mark;
        mark = this.mark();
        if ((a = this._loop0_82()) && (b = this._loop1_83()) && (literal = this.expect("/")) && (literal_1 = this.expect(","))) {
            return pegen.slash_with_default(a, b);
        }
        this.reset(mark);
        if ((a = this._loop0_84()) && (b = this._loop1_85()) && (literal = this.expect("/")) && this.positive_lookahead(this.expect, ":")) {
            return pegen.slash_with_default(a, b);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    lambda_star_etc() {
        //# lambda_star_etc: '*' lambda_param_no_default lambda_param_maybe_default* lambda_kwds? | '*' ',' lambda_param_maybe_default+ lambda_kwds? | lambda_kwds | invalid_lambda_star_etc
        let a, b, c, invalid_lambda_star_etc, literal, literal_1, mark;
        mark = this.mark();
        if ((literal = this.expect("*")) && (a = this.lambda_param_no_default()) && (b = this._loop0_86()) && (c = this.lambda_kwds())) {
            return pegen.star_etc(a, b, c);
        }
        this.reset(mark);
        if ((literal = this.expect("*")) && (literal_1 = this.expect(",")) && (b = this._loop1_87()) && (c = this.lambda_kwds())) {
            return pegen.star_etc(null, b, c);
        }
        this.reset(mark);
        if ((a = this.lambda_kwds())) {
            return pegen.star_etc(null, null, a);
        }
        this.reset(mark);
        if ((invalid_lambda_star_etc = this.invalid_lambda_star_etc())) {
            return invalid_lambda_star_etc;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    lambda_kwds() {
        //# lambda_kwds: '**' lambda_param_no_default
        let a, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("**")) && (a = this.lambda_param_no_default())) {
            return a;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    lambda_param_no_default() {
        //# lambda_param_no_default: lambda_param ',' | lambda_param &':'
        let a, literal, mark;
        mark = this.mark();
        if ((a = this.lambda_param()) && (literal = this.expect(","))) {
            return a;
        }
        this.reset(mark);
        if ((a = this.lambda_param()) && this.positive_lookahead(this.expect, ":")) {
            return a;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    lambda_param_with_default() {
        //# lambda_param_with_default: lambda_param default ',' | lambda_param default &':'
        let a, c, literal, mark;
        mark = this.mark();
        if ((a = this.lambda_param()) && (c = this.default()) && (literal = this.expect(","))) {
            return pegen.name_default_pair(a, c, null);
        }
        this.reset(mark);
        if ((a = this.lambda_param()) && (c = this.default()) && this.positive_lookahead(this.expect, ":")) {
            return pegen.name_default_pair(a, c, null);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    lambda_param_maybe_default() {
        //# lambda_param_maybe_default: lambda_param default? ',' | lambda_param default? &':'
        let a, c, literal, mark;
        mark = this.mark();
        if ((a = this.lambda_param()) && (c = this.default()) && (literal = this.expect(","))) {
            return pegen.name_default_pair(a, c, null);
        }
        this.reset(mark);
        if ((a = this.lambda_param()) && (c = this.default()) && this.positive_lookahead(this.expect, ":")) {
            return pegen.name_default_pair(a, c, null);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    lambda_param() {
        //# lambda_param: NAME
        let a, mark;
        mark = this.mark();
        if ((a = this.name())) {
            return new astnodes.arg(a.id, null, null, ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    disjunction() {
        //# disjunction: conjunction (('or' conjunction))+ | conjunction
        let a, b, conjunction, mark;
        mark = this.mark();
        if ((a = this.conjunction()) && (b = this._loop1_88())) {
            return new astnodes.BoolOp(new astnodes.Or(), pegen.seq_insert_in_front(a, b), ...EXTRA);
        }
        this.reset(mark);
        if ((conjunction = this.conjunction())) {
            return conjunction;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    conjunction() {
        //# conjunction: inversion (('and' inversion))+ | inversion
        let a, b, inversion, mark;
        mark = this.mark();
        if ((a = this.inversion()) && (b = this._loop1_89())) {
            return new astnodes.BoolOp(new astnodes.And(), pegen.seq_insert_in_front(a, b), ...EXTRA);
        }
        this.reset(mark);
        if ((inversion = this.inversion())) {
            return inversion;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    inversion() {
        //# inversion: 'not' inversion | comparison
        let a, comparison, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("not")) && (a = this.inversion())) {
            return new astnodes.UnaryOp(new astnodes.Not(), a, ...EXTRA);
        }
        this.reset(mark);
        if ((comparison = this.comparison())) {
            return comparison;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    comparison() {
        //# comparison: bitwise_or compare_op_bitwise_or_pair+ | bitwise_or
        let a, b, bitwise_or, mark;
        mark = this.mark();
        if ((a = this.bitwise_or()) && (b = this._loop1_90())) {
            return new astnodes.Compare(a, pegen.get_cmpops(b), pegen.get_exprs(b), ...EXTRA);
        }
        this.reset(mark);
        if ((bitwise_or = this.bitwise_or())) {
            return bitwise_or;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    compare_op_bitwise_or_pair() {
        //# compare_op_bitwise_or_pair: eq_bitwise_or | noteq_bitwise_or | lte_bitwise_or | lt_bitwise_or | gte_bitwise_or | gt_bitwise_or | notin_bitwise_or | in_bitwise_or | isnot_bitwise_or | is_bitwise_or
        let eq_bitwise_or,
            gt_bitwise_or,
            gte_bitwise_or,
            in_bitwise_or,
            is_bitwise_or,
            isnot_bitwise_or,
            lt_bitwise_or,
            lte_bitwise_or,
            mark,
            noteq_bitwise_or,
            notin_bitwise_or;
        mark = this.mark();
        if ((eq_bitwise_or = this.eq_bitwise_or())) {
            return eq_bitwise_or;
        }
        this.reset(mark);
        if ((noteq_bitwise_or = this.noteq_bitwise_or())) {
            return noteq_bitwise_or;
        }
        this.reset(mark);
        if ((lte_bitwise_or = this.lte_bitwise_or())) {
            return lte_bitwise_or;
        }
        this.reset(mark);
        if ((lt_bitwise_or = this.lt_bitwise_or())) {
            return lt_bitwise_or;
        }
        this.reset(mark);
        if ((gte_bitwise_or = this.gte_bitwise_or())) {
            return gte_bitwise_or;
        }
        this.reset(mark);
        if ((gt_bitwise_or = this.gt_bitwise_or())) {
            return gt_bitwise_or;
        }
        this.reset(mark);
        if ((notin_bitwise_or = this.notin_bitwise_or())) {
            return notin_bitwise_or;
        }
        this.reset(mark);
        if ((in_bitwise_or = this.in_bitwise_or())) {
            return in_bitwise_or;
        }
        this.reset(mark);
        if ((isnot_bitwise_or = this.isnot_bitwise_or())) {
            return isnot_bitwise_or;
        }
        this.reset(mark);
        if ((is_bitwise_or = this.is_bitwise_or())) {
            return is_bitwise_or;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    eq_bitwise_or() {
        //# eq_bitwise_or: '==' bitwise_or
        let a, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("==")) && (a = this.bitwise_or())) {
            return pegen.cmpop_expr_pair(new astnodes.Eq(), a);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    noteq_bitwise_or() {
        //# noteq_bitwise_or: ('!=') bitwise_or
        let a, mark, tok;
        mark = this.mark();
        if ((tok = this.expect("!=")) && (a = this.bitwise_or())) {
            return pegen.cmpop_expr_pair(new astnodes.NotEq(), a);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    lte_bitwise_or() {
        //# lte_bitwise_or: '<=' bitwise_or
        let a, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("<=")) && (a = this.bitwise_or())) {
            return pegen.cmpop_expr_pair(new astnodes.LtE(), a);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    lt_bitwise_or() {
        //# lt_bitwise_or: '<' bitwise_or
        let a, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("<")) && (a = this.bitwise_or())) {
            return pegen.cmpop_expr_pair(new astnodes.Lt(), a);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    gte_bitwise_or() {
        //# gte_bitwise_or: '>=' bitwise_or
        let a, literal, mark;
        mark = this.mark();
        if ((literal = this.expect(">=")) && (a = this.bitwise_or())) {
            return pegen.cmpop_expr_pair(new astnodes.GtE(), a);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    gt_bitwise_or() {
        //# gt_bitwise_or: '>' bitwise_or
        let a, literal, mark;
        mark = this.mark();
        if ((literal = this.expect(">")) && (a = this.bitwise_or())) {
            return pegen.cmpop_expr_pair(new astnodes.Gt(), a);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    notin_bitwise_or() {
        //# notin_bitwise_or: 'not' 'in' bitwise_or
        let a, literal, literal_1, mark;
        mark = this.mark();
        if ((literal = this.expect("not")) && (literal_1 = this.expect("in")) && (a = this.bitwise_or())) {
            return pegen.cmpop_expr_pair(new astnodes.NotIn(), a);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    in_bitwise_or() {
        //# in_bitwise_or: 'in' bitwise_or
        let a, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("in")) && (a = this.bitwise_or())) {
            return pegen.cmpop_expr_pair(new astnodes.In(), a);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    isnot_bitwise_or() {
        //# isnot_bitwise_or: 'is' 'not' bitwise_or
        let a, literal, literal_1, mark;
        mark = this.mark();
        if ((literal = this.expect("is")) && (literal_1 = this.expect("not")) && (a = this.bitwise_or())) {
            return pegen.cmpop_expr_pair(new astnodes.IsNot(), a);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    is_bitwise_or() {
        //# is_bitwise_or: 'is' bitwise_or
        let a, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("is")) && (a = this.bitwise_or())) {
            return pegen.cmpop_expr_pair(new astnodes.Is(), a);
        }
        this.reset(mark);

        return null;
    }

    // @memoize_left_rec
    bitwise_or() {
        //# bitwise_or: bitwise_or '|' bitwise_xor | bitwise_xor
        let a, b, bitwise_xor, literal, mark;
        mark = this.mark();
        if ((a = this.bitwise_or()) && (literal = this.expect("|")) && (b = this.bitwise_xor())) {
            return new astnodes.BinOp(a, new astnodes.BitOr(), b, ...EXTRA);
        }
        this.reset(mark);
        if ((bitwise_xor = this.bitwise_xor())) {
            return bitwise_xor;
        }
        this.reset(mark);

        return null;
    }

    // @memoize_left_rec
    bitwise_xor() {
        //# bitwise_xor: bitwise_xor '^' bitwise_and | bitwise_and
        let a, b, bitwise_and, literal, mark;
        mark = this.mark();
        if ((a = this.bitwise_xor()) && (literal = this.expect("^")) && (b = this.bitwise_and())) {
            return new astnodes.BinOp(a, new astnodes.BitXor(), b, ...EXTRA);
        }
        this.reset(mark);
        if ((bitwise_and = this.bitwise_and())) {
            return bitwise_and;
        }
        this.reset(mark);

        return null;
    }

    // @memoize_left_rec
    bitwise_and() {
        //# bitwise_and: bitwise_and '&' shift_expr | shift_expr
        let a, b, literal, mark, shift_expr;
        mark = this.mark();
        if ((a = this.bitwise_and()) && (literal = this.expect("&")) && (b = this.shift_expr())) {
            return new astnodes.BinOp(a, new astnodes.BitAnd(), b, ...EXTRA);
        }
        this.reset(mark);
        if ((shift_expr = this.shift_expr())) {
            return shift_expr;
        }
        this.reset(mark);

        return null;
    }

    // @memoize_left_rec
    shift_expr() {
        //# shift_expr: shift_expr '<<' sum | shift_expr '>>' sum | sum
        let a, b, literal, mark, sum;
        mark = this.mark();
        if ((a = this.shift_expr()) && (literal = this.expect("<<")) && (b = this.sum())) {
            return new astnodes.BinOp(a, new astnodes.LShift(), b, ...EXTRA);
        }
        this.reset(mark);
        if ((a = this.shift_expr()) && (literal = this.expect(">>")) && (b = this.sum())) {
            return new astnodes.BinOp(a, new astnodes.RShift(), b, ...EXTRA);
        }
        this.reset(mark);
        if ((sum = this.sum())) {
            return sum;
        }
        this.reset(mark);

        return null;
    }

    // @memoize_left_rec
    sum() {
        //# sum: sum '+' term | sum '-' term | term
        let a, b, literal, mark, term;
        mark = this.mark();
        if ((a = this.sum()) && (literal = this.expect("+")) && (b = this.term())) {
            return new astnodes.BinOp(a, new astnodes.Add(), b, ...EXTRA);
        }
        this.reset(mark);
        if ((a = this.sum()) && (literal = this.expect("-")) && (b = this.term())) {
            return new astnodes.BinOp(a, new astnodes.Sub(), b, ...EXTRA);
        }
        this.reset(mark);
        if ((term = this.term())) {
            return term;
        }
        this.reset(mark);

        return null;
    }

    // @memoize_left_rec
    term() {
        //# term: term '*' factor | term '/' factor | term '//' factor | term '%' factor | term '@' factor | factor
        let a, b, factor, literal, mark;
        mark = this.mark();
        if ((a = this.term()) && (literal = this.expect("*")) && (b = this.factor())) {
            return new astnodes.BinOp(a, new astnodes.Mult(), b, ...EXTRA);
        }
        this.reset(mark);
        if ((a = this.term()) && (literal = this.expect("/")) && (b = this.factor())) {
            return new astnodes.BinOp(a, new astnodes.Div(), b, ...EXTRA);
        }
        this.reset(mark);
        if ((a = this.term()) && (literal = this.expect("//")) && (b = this.factor())) {
            return new astnodes.BinOp(a, new astnodes.FloorDiv(), b, ...EXTRA);
        }
        this.reset(mark);
        if ((a = this.term()) && (literal = this.expect("%")) && (b = this.factor())) {
            return new astnodes.BinOp(a, new astnodes.Mod(), b, ...EXTRA);
        }
        this.reset(mark);
        if ((a = this.term()) && (literal = this.expect("@")) && (b = this.factor())) {
            return CHECK_VERSION(5, "The '@' operator is", new astnodes.BinOp(a, new astnodes.MatMult(), b, ...EXTRA));
        }
        this.reset(mark);
        if ((factor = this.factor())) {
            return factor;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    factor() {
        //# factor: '+' factor | '-' factor | '~' factor | power
        let a, literal, mark, power;
        mark = this.mark();
        if ((literal = this.expect("+")) && (a = this.factor())) {
            return new astnodes.UnaryOp(new astnodes.UAdd(), a, ...EXTRA);
        }
        this.reset(mark);
        if ((literal = this.expect("-")) && (a = this.factor())) {
            return new astnodes.UnaryOp(new astnodes.USub(), a, ...EXTRA);
        }
        this.reset(mark);
        if ((literal = this.expect("~")) && (a = this.factor())) {
            return new astnodes.UnaryOp(new astnodes.Invert(), a, ...EXTRA);
        }
        this.reset(mark);
        if ((power = this.power())) {
            return power;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    power() {
        //# power: await_primary '**' factor | await_primary
        let a, await_primary, b, literal, mark;
        mark = this.mark();
        if ((a = this.await_primary()) && (literal = this.expect("**")) && (b = this.factor())) {
            return new astnodes.BinOp(a, new astnodes.Pow(), b, ...EXTRA);
        }
        this.reset(mark);
        if ((await_primary = this.await_primary())) {
            return await_primary;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    await_primary() {
        //# await_primary: AWAIT primary | primary
        let a, await_, mark, primary;
        mark = this.mark();
        if ((await_ = this.expect("AWAIT")) && (a = this.primary())) {
            return CHECK_VERSION(5, "Await expressions are", new astnodes.Await(a, ...EXTRA));
        }
        this.reset(mark);
        if ((primary = this.primary())) {
            return primary;
        }
        this.reset(mark);

        return null;
    }

    // @memoize_left_rec
    primary() {
        //# primary: invalid_primary | primary '.' NAME | primary genexp | primary '(' arguments? ')' | primary '[' slices ']' | atom
        let a, atom, b, invalid_primary, literal, literal_1, mark;
        mark = this.mark();
        if ((invalid_primary = this.invalid_primary())) {
            return invalid_primary;
        }
        this.reset(mark);
        if ((a = this.primary()) && (literal = this.expect(".")) && (b = this.name())) {
            return new astnodes.Attribute(a, b.id, new astnodes.Load(), ...EXTRA);
        }
        this.reset(mark);
        if ((a = this.primary()) && (b = this.genexp())) {
            return new astnodes.Call(a, pegen.singleton_seq(b), null, ...EXTRA);
        }
        this.reset(mark);
        if ((a = this.primary()) && (literal = this.expect("(")) && (b = this.arguments()) && (literal_1 = this.expect(")"))) {
            return new astnodes.Call(a, b.args, b.keywords, ...EXTRA);
        }
        this.reset(mark);
        if ((a = this.primary()) && (literal = this.expect("[")) && (b = this.slices()) && (literal_1 = this.expect("]"))) {
            return new astnodes.Subscript(a, b, new astnodes.Load(), ...EXTRA);
        }
        this.reset(mark);
        if ((atom = this.atom())) {
            return atom;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    slices() {
        //# slices: slice !',' | ','.slice+ ','?
        let a, mark, opt;
        mark = this.mark();
        if ((a = this.slice()) && this.negative_lookahead(this.expect, ",")) {
            return a;
        }
        this.reset(mark);
        if ((a = this._gather_91()) && (opt = this.expect(","))) {
            return new astnodes.Tuple(a, new astnodes.Load(), ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    slice() {
        //# slice: expression? ':' expression? [':' expression?] | named_expression
        let a, b, c, literal, mark;
        mark = this.mark();
        if ((a = this.expression()) && (literal = this.expect(":")) && (b = this.expression()) && (c = this._tmp_93())) {
            return new astnodes.Slice(a, b, c, ...EXTRA);
        }
        this.reset(mark);
        if ((a = this.named_expression())) {
            return a;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    atom() {
        //# atom: NAME | 'True' | 'False' | 'None' | &STRING strings | NUMBER | &'(' (tuple | group | genexp) | &'[' (list | listcomp) | &'{' (dict | set | dictcomp | setcomp) | '...'
        let _tmp_94, _tmp_95, _tmp_96, literal, mark, name, number, strings;
        mark = this.mark();
        if ((name = this.name())) {
            return name;
        }
        this.reset(mark);
        if ((literal = this.expect("True"))) {
            return new astnodes.Constant(pyTrue, null, ...EXTRA);
        }
        this.reset(mark);
        if ((literal = this.expect("False"))) {
            return new astnodes.Constant(pyFalse, null, ...EXTRA);
        }
        this.reset(mark);
        if ((literal = this.expect("None"))) {
            return new astnodes.Constant(pyNone, null, ...EXTRA);
        }
        this.reset(mark);
        if (this.positive_lookahead(this.string) && (strings = this.strings())) {
            return strings;
        }
        this.reset(mark);
        if ((number = this.number())) {
            return number;
        }
        this.reset(mark);
        if (this.positive_lookahead(this.expect, "(") && (_tmp_94 = this._tmp_94())) {
            return _tmp_94;
        }
        this.reset(mark);
        if (this.positive_lookahead(this.expect, "[") && (_tmp_95 = this._tmp_95())) {
            return _tmp_95;
        }
        this.reset(mark);
        if (this.positive_lookahead(this.expect, "{") && (_tmp_96 = this._tmp_96())) {
            return _tmp_96;
        }
        this.reset(mark);
        if ((literal = this.expect("..."))) {
            return new astnodes.Constant(pyEllipsis, null, ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    strings() {
        //# strings: STRING+
        let a, mark;
        mark = this.mark();
        if ((a = this._loop1_97())) {
            return pegen.concatenate_strings(a);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    list() {
        //# list: '[' star_named_expressions? ']'
        let a, literal, literal_1, mark;
        mark = this.mark();
        if ((literal = this.expect("[")) && (a = this.star_named_expressions()) && (literal_1 = this.expect("]"))) {
            return new astnodes.List(a, new astnodes.Load(), ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    listcomp() {
        //# listcomp: '[' named_expression ~ for_if_clauses ']' | invalid_comprehension
        let a, b, cut, invalid_comprehension, literal, literal_1, mark;
        mark = this.mark();
        if ((literal = this.expect("[")) && (a = this.named_expression()) && (cut = true) && (b = this.for_if_clauses()) && (literal_1 = this.expect("]"))) {
            return new astnodes.ListComp(a, b, ...EXTRA);
        }
        this.reset(mark);
        if (cut) return null;
        cut = false;
        if ((invalid_comprehension = this.invalid_comprehension())) {
            return invalid_comprehension;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    tuple() {
        //# tuple: '(' [star_named_expression ',' star_named_expressions?] ')'
        let a, literal, literal_1, mark;
        mark = this.mark();
        if ((literal = this.expect("(")) && (a = this._tmp_98()) && (literal_1 = this.expect(")"))) {
            return new astnodes.Tuple(a, new astnodes.Load(), ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    group() {
        //# group: '(' (yield_expr | named_expression) ')' | invalid_group
        let a, invalid_group, literal, literal_1, mark;
        mark = this.mark();
        if ((literal = this.expect("(")) && (a = this._tmp_99()) && (literal_1 = this.expect(")"))) {
            return a;
        }
        this.reset(mark);
        if ((invalid_group = this.invalid_group())) {
            return invalid_group;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    genexp() {
        //# genexp: '(' named_expression ~ for_if_clauses ')' | invalid_comprehension
        let a, b, cut, invalid_comprehension, literal, literal_1, mark;
        mark = this.mark();
        if ((literal = this.expect("(")) && (a = this.named_expression()) && (cut = true) && (b = this.for_if_clauses()) && (literal_1 = this.expect(")"))) {
            return new astnodes.GeneratorExp(a, b, ...EXTRA);
        }
        this.reset(mark);
        if (cut) return null;
        cut = false;
        if ((invalid_comprehension = this.invalid_comprehension())) {
            return invalid_comprehension;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    set() {
        //# set: '{' star_named_expressions '}'
        let a, literal, literal_1, mark;
        mark = this.mark();
        if ((literal = this.expect("{")) && (a = this.star_named_expressions()) && (literal_1 = this.expect("}"))) {
            return new astnodes.Set(a, ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    setcomp() {
        //# setcomp: '{' named_expression ~ for_if_clauses '}' | invalid_comprehension
        let a, b, cut, invalid_comprehension, literal, literal_1, mark;
        mark = this.mark();
        if ((literal = this.expect("{")) && (a = this.named_expression()) && (cut = true) && (b = this.for_if_clauses()) && (literal_1 = this.expect("}"))) {
            return new astnodes.SetComp(a, b, ...EXTRA);
        }
        this.reset(mark);
        if (cut) return null;
        cut = false;
        if ((invalid_comprehension = this.invalid_comprehension())) {
            return invalid_comprehension;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    dict() {
        //# dict: '{' double_starred_kvpairs? '}'
        let a, literal, literal_1, mark;
        mark = this.mark();
        if ((literal = this.expect("{")) && (a = this.double_starred_kvpairs()) && (literal_1 = this.expect("}"))) {
            return new astnodes.Dict(pegen.get_keys(a), pegen.get_values(a), ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    dictcomp() {
        //# dictcomp: '{' kvpair for_if_clauses '}' | invalid_dict_comprehension
        let a, b, invalid_dict_comprehension, literal, literal_1, mark;
        mark = this.mark();
        if ((literal = this.expect("{")) && (a = this.kvpair()) && (b = this.for_if_clauses()) && (literal_1 = this.expect("}"))) {
            return new astnodes.DictComp(a.key, a.value, b, ...EXTRA);
        }
        this.reset(mark);
        if ((invalid_dict_comprehension = this.invalid_dict_comprehension())) {
            return invalid_dict_comprehension;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    double_starred_kvpairs() {
        //# double_starred_kvpairs: ','.double_starred_kvpair+ ','?
        let a, mark, opt;
        mark = this.mark();
        if ((a = this._gather_100()) && (opt = this.expect(","))) {
            return a;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    double_starred_kvpair() {
        //# double_starred_kvpair: '**' bitwise_or | kvpair
        let a, kvpair, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("**")) && (a = this.bitwise_or())) {
            return pegen.key_value_pair(null, a);
        }
        this.reset(mark);
        if ((kvpair = this.kvpair())) {
            return kvpair;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    kvpair() {
        //# kvpair: expression ':' expression
        let a, b, literal, mark;
        mark = this.mark();
        if ((a = this.expression()) && (literal = this.expect(":")) && (b = this.expression())) {
            return pegen.key_value_pair(a, b);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    for_if_clauses() {
        //# for_if_clauses: for_if_clause+
        let a, mark;
        mark = this.mark();
        if ((a = this._loop1_102())) {
            return a;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    for_if_clause() {
        //# for_if_clause: ASYNC 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | 'for' star_targets 'in' ~ disjunction (('if' disjunction))* | invalid_for_target
        let a, async, b, c, cut, invalid_for_target, literal, literal_1, mark;
        mark = this.mark();
        if (
            (async = this.expect("ASYNC")) &&
            (literal = this.expect("for")) &&
            (a = this.star_targets()) &&
            (literal_1 = this.expect("in")) &&
            (cut = true) &&
            (b = this.disjunction()) &&
            (c = this._loop0_103())
        ) {
            return CHECK_VERSION(comprehension_ty, 6, "Async comprehensions are", new astnodes.comprehension(a, b, c, 1));
        }
        this.reset(mark);
        if (cut) return null;
        cut = false;
        if (
            (literal = this.expect("for")) &&
            (a = this.star_targets()) &&
            (literal_1 = this.expect("in")) &&
            (cut = true) &&
            (b = this.disjunction()) &&
            (c = this._loop0_104())
        ) {
            return new astnodes.comprehension(a, b, c, 0);
        }
        this.reset(mark);
        if (cut) return null;
        cut = false;
        if ((invalid_for_target = this.invalid_for_target())) {
            return invalid_for_target;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    yield_expr() {
        //# yield_expr: 'yield' 'from' expression | 'yield' star_expressions?
        let a, literal, literal_1, mark;
        mark = this.mark();
        if ((literal = this.expect("yield")) && (literal_1 = this.expect("from")) && (a = this.expression())) {
            return new astnodes.YieldFrom(a, ...EXTRA);
        }
        this.reset(mark);
        if ((literal = this.expect("yield")) && (a = this.star_expressions())) {
            return new astnodes.Yield(a, ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    arguments() {
        //# arguments: args ','? &')' | invalid_arguments
        let a, invalid_arguments, mark, opt;
        mark = this.mark();
        if ((a = this.args()) && (opt = this.expect(",")) && this.positive_lookahead(this.expect, ")")) {
            return a;
        }
        this.reset(mark);
        if ((invalid_arguments = this.invalid_arguments())) {
            return invalid_arguments;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    args() {
        //# args: ','.(starred_expression | named_expression !'=')+ [',' kwargs] | kwargs
        let a, b, mark;
        mark = this.mark();
        if ((a = this._gather_105()) && (b = this._tmp_107())) {
            return pegen.collect_call_seqs(a, b, ...EXTRA);
        }
        this.reset(mark);
        if ((a = this.kwargs())) {
            return new astnodes.Call(
                pegen.dummy_name(p),
                CHECK_null_ALLOWED(pegen.seq_extract_starred_exprs(a)),
                CHECK_null_ALLOWED(pegen.seq_delete_starred_exprs(a)),
                ...EXTRA
            );
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    kwargs() {
        //# kwargs: ','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+ | ','.kwarg_or_starred+ | ','.kwarg_or_double_starred+
        let _gather_112, _gather_114, a, b, literal, mark;
        mark = this.mark();
        if ((a = this._gather_108()) && (literal = this.expect(",")) && (b = this._gather_110())) {
            return pegen.join_sequences(a, b);
        }
        this.reset(mark);
        if ((_gather_112 = this._gather_112())) {
            return _gather_112;
        }
        this.reset(mark);
        if ((_gather_114 = this._gather_114())) {
            return _gather_114;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    starred_expression() {
        //# starred_expression: '*' expression
        let a, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("*")) && (a = this.expression())) {
            return new astnodes.Starred(a, new astnodes.Load(), ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    kwarg_or_starred() {
        //# kwarg_or_starred: NAME '=' expression | starred_expression | invalid_kwarg
        let a, b, invalid_kwarg, literal, mark;
        mark = this.mark();
        if ((a = this.name()) && (literal = this.expect("=")) && (b = this.expression())) {
            return pegen.keyword_or_starred((keyword_ty, new astnodes.keyword(a.id, b, ...EXTRA)), 1);
        }
        this.reset(mark);
        if ((a = this.starred_expression())) {
            return pegen.keyword_or_starred(a, 0);
        }
        this.reset(mark);
        if ((invalid_kwarg = this.invalid_kwarg())) {
            return invalid_kwarg;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    kwarg_or_double_starred() {
        //# kwarg_or_double_starred: NAME '=' expression | '**' expression | invalid_kwarg
        let a, b, invalid_kwarg, literal, mark;
        mark = this.mark();
        if ((a = this.name()) && (literal = this.expect("=")) && (b = this.expression())) {
            return pegen.keyword_or_starred((keyword_ty, new astnodes.keyword(a.id, b, ...EXTRA)), 1);
        }
        this.reset(mark);
        if ((literal = this.expect("**")) && (a = this.expression())) {
            return pegen.keyword_or_starred((keyword_ty, new astnodes.keyword(null, a, ...EXTRA)), 1);
        }
        this.reset(mark);
        if ((invalid_kwarg = this.invalid_kwarg())) {
            return invalid_kwarg;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    star_targets() {
        //# star_targets: star_target !',' | star_target ((',' star_target))* ','?
        let a, b, mark, opt;
        mark = this.mark();
        if ((a = this.star_target()) && this.negative_lookahead(this.expect, ",")) {
            return a;
        }
        this.reset(mark);
        if ((a = this.star_target()) && (b = this._loop0_116()) && (opt = this.expect(","))) {
            return new astnodes.Tuple(pegen.seq_insert_in_front(a, b), new astnodes.Store(), ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    star_targets_seq() {
        //# star_targets_seq: ','.star_target+ ','?
        let a, mark, opt;
        mark = this.mark();
        if ((a = this._gather_117()) && (opt = this.expect(","))) {
            return a;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    star_target() {
        //# star_target: '*' (!'*' star_target) | t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | star_atom
        let a, b, literal, literal_1, mark, star_atom;
        mark = this.mark();
        if ((literal = this.expect("*")) && (a = this._tmp_119())) {
            return new astnodes.Starred(pegen.set_expr_context(a, new astnodes.Store()), new astnodes.Store(), ...EXTRA);
        }
        this.reset(mark);
        if ((a = this.t_primary()) && (literal = this.expect(".")) && (b = this.name()) && this.negative_lookahead(this.t_lookahead)) {
            return new astnodes.Attribute(a, b.id, new astnodes.Store(), ...EXTRA);
        }
        this.reset(mark);
        if (
            (a = this.t_primary()) &&
            (literal = this.expect("[")) &&
            (b = this.slices()) &&
            (literal_1 = this.expect("]")) &&
            this.negative_lookahead(this.t_lookahead)
        ) {
            return new astnodes.Subscript(a, b, new astnodes.Store(), ...EXTRA);
        }
        this.reset(mark);
        if ((star_atom = this.star_atom())) {
            return star_atom;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    star_atom() {
        //# star_atom: NAME | '(' star_target ')' | '(' star_targets_seq? ')' | '[' star_targets_seq? ']'
        let a, literal, literal_1, mark;
        mark = this.mark();
        if ((a = this.name())) {
            return pegen.set_expr_context(a, new astnodes.Store());
        }
        this.reset(mark);
        if ((literal = this.expect("(")) && (a = this.star_target()) && (literal_1 = this.expect(")"))) {
            return pegen.set_expr_context(a, new astnodes.Store());
        }
        this.reset(mark);
        if ((literal = this.expect("(")) && (a = this.star_targets_seq()) && (literal_1 = this.expect(")"))) {
            return new astnodes.Tuple(a, new astnodes.Store(), ...EXTRA);
        }
        this.reset(mark);
        if ((literal = this.expect("[")) && (a = this.star_targets_seq()) && (literal_1 = this.expect("]"))) {
            return new astnodes.List(a, new astnodes.Store(), ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    single_target() {
        //# single_target: single_subscript_attribute_target | NAME | '(' single_target ')'
        let a, literal, literal_1, mark, single_subscript_attribute_target;
        mark = this.mark();
        if ((single_subscript_attribute_target = this.single_subscript_attribute_target())) {
            return single_subscript_attribute_target;
        }
        this.reset(mark);
        if ((a = this.name())) {
            return pegen.set_expr_context(a, new astnodes.Store());
        }
        this.reset(mark);
        if ((literal = this.expect("(")) && (a = this.single_target()) && (literal_1 = this.expect(")"))) {
            return a;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    single_subscript_attribute_target() {
        //# single_subscript_attribute_target: t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead
        let a, b, literal, literal_1, mark;
        mark = this.mark();
        if ((a = this.t_primary()) && (literal = this.expect(".")) && (b = this.name()) && this.negative_lookahead(this.t_lookahead)) {
            return new astnodes.Attribute(a, b.id, new astnodes.Store(), ...EXTRA);
        }
        this.reset(mark);
        if (
            (a = this.t_primary()) &&
            (literal = this.expect("[")) &&
            (b = this.slices()) &&
            (literal_1 = this.expect("]")) &&
            this.negative_lookahead(this.t_lookahead)
        ) {
            return new astnodes.Subscript(a, b, new astnodes.Store(), ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    del_targets() {
        //# del_targets: ','.del_target+ ','?
        let a, mark, opt;
        mark = this.mark();
        if ((a = this._gather_120()) && (opt = this.expect(","))) {
            return a;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    del_target() {
        //# del_target: t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | del_t_atom
        let a, b, del_t_atom, literal, literal_1, mark;
        mark = this.mark();
        if ((a = this.t_primary()) && (literal = this.expect(".")) && (b = this.name()) && this.negative_lookahead(this.t_lookahead)) {
            return new astnodes.Attribute(a, b.id, new astnodes.Del(), ...EXTRA);
        }
        this.reset(mark);
        if (
            (a = this.t_primary()) &&
            (literal = this.expect("[")) &&
            (b = this.slices()) &&
            (literal_1 = this.expect("]")) &&
            this.negative_lookahead(this.t_lookahead)
        ) {
            return new astnodes.Subscript(a, b, new astnodes.Del(), ...EXTRA);
        }
        this.reset(mark);
        if ((del_t_atom = this.del_t_atom())) {
            return del_t_atom;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    del_t_atom() {
        //# del_t_atom: NAME | '(' del_target ')' | '(' del_targets? ')' | '[' del_targets? ']'
        let a, literal, literal_1, mark;
        mark = this.mark();
        if ((a = this.name())) {
            return pegen.set_expr_context(a, new astnodes.Del());
        }
        this.reset(mark);
        if ((literal = this.expect("(")) && (a = this.del_target()) && (literal_1 = this.expect(")"))) {
            return pegen.set_expr_context(a, new astnodes.Del());
        }
        this.reset(mark);
        if ((literal = this.expect("(")) && (a = this.del_targets()) && (literal_1 = this.expect(")"))) {
            return new astnodes.Tuple(a, new astnodes.Del(), ...EXTRA);
        }
        this.reset(mark);
        if ((literal = this.expect("[")) && (a = this.del_targets()) && (literal_1 = this.expect("]"))) {
            return new astnodes.List(a, new astnodes.Del(), ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    targets() {
        //# targets: ','.target+ ','?
        let a, mark, opt;
        mark = this.mark();
        if ((a = this._gather_122()) && (opt = this.expect(","))) {
            return a;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    target() {
        //# target: t_primary '.' NAME !t_lookahead | t_primary '[' slices ']' !t_lookahead | t_atom
        let a, b, literal, literal_1, mark, t_atom;
        mark = this.mark();
        if ((a = this.t_primary()) && (literal = this.expect(".")) && (b = this.name()) && this.negative_lookahead(this.t_lookahead)) {
            return new astnodes.Attribute(a, b.id, new astnodes.Store(), ...EXTRA);
        }
        this.reset(mark);
        if (
            (a = this.t_primary()) &&
            (literal = this.expect("[")) &&
            (b = this.slices()) &&
            (literal_1 = this.expect("]")) &&
            this.negative_lookahead(this.t_lookahead)
        ) {
            return new astnodes.Subscript(a, b, new astnodes.Store(), ...EXTRA);
        }
        this.reset(mark);
        if ((t_atom = this.t_atom())) {
            return t_atom;
        }
        this.reset(mark);

        return null;
    }

    // @memoize_left_rec
    t_primary() {
        //# t_primary: t_primary '.' NAME &t_lookahead | t_primary '[' slices ']' &t_lookahead | t_primary genexp &t_lookahead | t_primary '(' arguments? ')' &t_lookahead | atom &t_lookahead
        let a, b, literal, literal_1, mark;
        mark = this.mark();
        if ((a = this.t_primary()) && (literal = this.expect(".")) && (b = this.name()) && this.positive_lookahead(this.t_lookahead)) {
            return new astnodes.Attribute(a, b.id, new astnodes.Load(), ...EXTRA);
        }
        this.reset(mark);
        if (
            (a = this.t_primary()) &&
            (literal = this.expect("[")) &&
            (b = this.slices()) &&
            (literal_1 = this.expect("]")) &&
            this.positive_lookahead(this.t_lookahead)
        ) {
            return new astnodes.Subscript(a, b, new astnodes.Load(), ...EXTRA);
        }
        this.reset(mark);
        if ((a = this.t_primary()) && (b = this.genexp()) && this.positive_lookahead(this.t_lookahead)) {
            return new astnodes.Call(a, pegen.singleton_seq(b), null, ...EXTRA);
        }
        this.reset(mark);
        if (
            (a = this.t_primary()) &&
            (literal = this.expect("(")) &&
            (b = this.arguments()) &&
            (literal_1 = this.expect(")")) &&
            this.positive_lookahead(this.t_lookahead)
        ) {
            return new astnodes.Call(a, b.args, b.keywords, ...EXTRA);
        }
        this.reset(mark);
        if ((a = this.atom()) && this.positive_lookahead(this.t_lookahead)) {
            return a;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    t_lookahead() {
        //# t_lookahead: '(' | '[' | '.'
        let literal, mark;
        mark = this.mark();
        if ((literal = this.expect("("))) {
            return literal;
        }
        this.reset(mark);
        if ((literal = this.expect("["))) {
            return literal;
        }
        this.reset(mark);
        if ((literal = this.expect("."))) {
            return literal;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    t_atom() {
        //# t_atom: NAME | '(' target ')' | '(' targets? ')' | '[' targets? ']'
        let a, b, literal, literal_1, mark;
        mark = this.mark();
        if ((a = this.name())) {
            return pegen.set_expr_context(a, new astnodes.Store());
        }
        this.reset(mark);
        if ((literal = this.expect("(")) && (a = this.target()) && (literal_1 = this.expect(")"))) {
            return pegen.set_expr_context(a, new astnodes.Store());
        }
        this.reset(mark);
        if ((literal = this.expect("(")) && (b = this.targets()) && (literal_1 = this.expect(")"))) {
            return new astnodes.Tuple(b, new astnodes.Store(), ...EXTRA);
        }
        this.reset(mark);
        if ((literal = this.expect("[")) && (b = this.targets()) && (literal_1 = this.expect("]"))) {
            return new astnodes.List(b, new astnodes.Store(), ...EXTRA);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    invalid_arguments() {
        //# invalid_arguments: args ',' '*' | expression for_if_clauses ',' [args | expression for_if_clauses] | args for_if_clauses | args ',' expression for_if_clauses | args ',' args
        let a, args, for_if_clauses, literal, literal_1, mark, opt;
        mark = this.mark();
        if ((args = this.args()) && (literal = this.expect(",")) && (literal_1 = this.expect("*"))) {
            return pegen.RAISE_SYNTAX_ERROR("iterable argument unpacking follows keyword argument unpacking");
        }
        this.reset(mark);
        if ((a = this.expression()) && (for_if_clauses = this.for_if_clauses()) && (literal = this.expect(",")) && (opt = this._tmp_124())) {
            return pegen.RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, "Generator expression must be parenthesized");
        }
        this.reset(mark);
        if ((a = this.args()) && (for_if_clauses = this.for_if_clauses())) {
            return pegen.nonparen_genexp_in_call(a);
        }
        this.reset(mark);
        if ((args = this.args()) && (literal = this.expect(",")) && (a = this.expression()) && (for_if_clauses = this.for_if_clauses())) {
            return pegen.RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, "Generator expression must be parenthesized");
        }
        this.reset(mark);
        if ((a = this.args()) && (literal = this.expect(",")) && (args = this.args())) {
            return pegen.arguments_parsing_error(a);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    invalid_kwarg() {
        //# invalid_kwarg: expression '='
        let a, expression, mark;
        mark = this.mark();
        if ((expression = this.expression()) && (a = this.expect("="))) {
            return pegen.RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, 'expression cannot contain assignment, perhaps you meant "=="?');
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    invalid_named_expression() {
        //# invalid_named_expression: expression ':=' expression
        let a, expression, literal, mark;
        mark = this.mark();
        if ((a = this.expression()) && (literal = this.expect(":=")) && (expression = this.expression())) {
            return pegen.RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, "cannot use assignment expressions with %s", pegen.get_expr_name(a));
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    invalid_assignment() {
        //# invalid_assignment: invalid_ann_assign_target ':' expression | star_named_expression ',' star_named_expressions* ':' expression | expression ':' expression | ((star_targets '='))* star_expressions '=' | ((star_targets '='))* yield_expr '=' | star_expressions augassign (yield_expr | star_expressions)
        let _loop0_125, _loop0_126, _loop0_127, _tmp_128, a, augassign, expression, literal, literal_1, mark;
        mark = this.mark();
        if ((a = this.invalid_ann_assign_target()) && (literal = this.expect(":")) && (expression = this.expression())) {
            return pegen.RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, "only single target (not %s) can be annotated", pegen.get_expr_name(a));
        }
        this.reset(mark);
        if (
            (a = this.star_named_expression()) &&
            (literal = this.expect(",")) &&
            (_loop0_125 = this._loop0_125()) &&
            (literal_1 = this.expect(":")) &&
            (expression = this.expression())
        ) {
            return pegen.RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, "only single target (not tuple) can be annotated");
        }
        this.reset(mark);
        if ((a = this.expression()) && (literal = this.expect(":")) && (expression = this.expression())) {
            return pegen.RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, "illegal target for annotation");
        }
        this.reset(mark);
        if ((_loop0_126 = this._loop0_126()) && (a = this.star_expressions()) && (literal = this.expect("="))) {
            return pegen.RAISE_SYNTAX_ERROR_INVALID_TARGET(STAR_TARGETS, a);
        }
        this.reset(mark);
        if ((_loop0_127 = this._loop0_127()) && (a = this.yield_expr()) && (literal = this.expect("="))) {
            return pegen.RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, "assignment to yield expression not possible");
        }
        this.reset(mark);
        if ((a = this.star_expressions()) && (augassign = this.augassign()) && (_tmp_128 = this._tmp_128())) {
            return pegen.RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, "'%s' is an illegal expression for augmented assignment", pegen.get_expr_name(a));
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    invalid_ann_assign_target() {
        //# invalid_ann_assign_target: list | tuple | '(' invalid_ann_assign_target ')'
        let a, list, literal, literal_1, mark, tuple;
        mark = this.mark();
        if ((list = this.list())) {
            return list;
        }
        this.reset(mark);
        if ((tuple = this.tuple())) {
            return tuple;
        }
        this.reset(mark);
        if ((literal = this.expect("(")) && (a = this.invalid_ann_assign_target()) && (literal_1 = this.expect(")"))) {
            return a;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    invalid_del_stmt() {
        //# invalid_del_stmt: 'del' star_expressions
        let a, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("del")) && (a = this.star_expressions())) {
            return pegen.RAISE_SYNTAX_ERROR_INVALID_TARGET(DEL_TARGETS, a);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    invalid_block() {
        //# invalid_block: NEWLINE !INDENT
        let mark, newline;
        mark = this.mark();
        if ((newline = this.expect("NEWLINE")) && this.negative_lookahead(this.expect, "INDENT")) {
            return pegen.RAISE_INDENTATION_ERROR("expected an indented block");
        }
        this.reset(mark);

        return null;
    }

    // @logger
    invalid_primary() {
        //# invalid_primary: primary '{'
        let a, mark, primary;
        mark = this.mark();
        if ((primary = this.primary()) && (a = this.expect("{"))) {
            return pegen.RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, "invalid syntax");
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    invalid_comprehension() {
        //# invalid_comprehension: ('[' | '(' | '{') starred_expression for_if_clauses
        let _tmp_129, a, for_if_clauses, mark;
        mark = this.mark();
        if ((_tmp_129 = this._tmp_129()) && (a = this.starred_expression()) && (for_if_clauses = this.for_if_clauses())) {
            return pegen.RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, "iterable unpacking cannot be used in comprehension");
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    invalid_dict_comprehension() {
        //# invalid_dict_comprehension: '{' '**' bitwise_or for_if_clauses '}'
        let a, bitwise_or, for_if_clauses, literal, literal_1, mark;
        mark = this.mark();
        if (
            (literal = this.expect("{")) &&
            (a = this.expect("**")) &&
            (bitwise_or = this.bitwise_or()) &&
            (for_if_clauses = this.for_if_clauses()) &&
            (literal_1 = this.expect("}"))
        ) {
            return pegen.RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, "dict unpacking cannot be used in dict comprehension");
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    invalid_parameters() {
        //# invalid_parameters: param_no_default* (slash_with_default | param_with_default+) param_no_default
        let _loop0_130, _tmp_131, mark, param_no_default;
        mark = this.mark();
        if ((_loop0_130 = this._loop0_130()) && (_tmp_131 = this._tmp_131()) && (param_no_default = this.param_no_default())) {
            return pegen.RAISE_SYNTAX_ERROR("non-default argument follows default argument");
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    invalid_lambda_parameters() {
        //# invalid_lambda_parameters: lambda_param_no_default* (lambda_slash_with_default | lambda_param_with_default+) lambda_param_no_default
        let _loop0_132, _tmp_133, lambda_param_no_default, mark;
        mark = this.mark();
        if ((_loop0_132 = this._loop0_132()) && (_tmp_133 = this._tmp_133()) && (lambda_param_no_default = this.lambda_param_no_default())) {
            return pegen.RAISE_SYNTAX_ERROR("non-default argument follows default argument");
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    invalid_star_etc() {
        //# invalid_star_etc: '*' (')' | ',' (')' | '**')) | '*' ',' TYPE_COMMENT
        let TYPE_COMMENT, _tmp_134, literal, literal_1, mark;
        mark = this.mark();
        if ((literal = this.expect("*")) && (_tmp_134 = this._tmp_134())) {
            return pegen.RAISE_SYNTAX_ERROR("named arguments must follow bare *");
        }
        this.reset(mark);
        if ((literal = this.expect("*")) && (literal_1 = this.expect(",")) && (TYPE_COMMENT = this.TYPE_COMMENT())) {
            return pegen.RAISE_SYNTAX_ERROR("bare * has associated type comment");
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    invalid_lambda_star_etc() {
        //# invalid_lambda_star_etc: '*' (':' | ',' (':' | '**'))
        let _tmp_135, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("*")) && (_tmp_135 = this._tmp_135())) {
            return pegen.RAISE_SYNTAX_ERROR("named arguments must follow bare *");
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    invalid_double_type_comments() {
        //# invalid_double_type_comments: TYPE_COMMENT NEWLINE TYPE_COMMENT NEWLINE INDENT
        let TYPE_COMMENT, TYPE_COMMENT_1, indent, mark, newline, newline_1;
        mark = this.mark();
        if (
            (TYPE_COMMENT = this.TYPE_COMMENT()) &&
            (newline = this.expect("NEWLINE")) &&
            (TYPE_COMMENT_1 = this.TYPE_COMMENT()) &&
            (newline_1 = this.expect("NEWLINE")) &&
            (indent = this.expect("INDENT"))
        ) {
            return pegen.RAISE_SYNTAX_ERROR("Cannot have two type comments on def");
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    invalid_with_item() {
        //# invalid_with_item: expression 'as' expression
        let a, expression, literal, mark;
        mark = this.mark();
        if ((expression = this.expression()) && (literal = this.expect("as")) && (a = this.expression())) {
            return pegen.RAISE_SYNTAX_ERROR_INVALID_TARGET(STAR_TARGETS, a);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    invalid_for_target() {
        //# invalid_for_target: ASYNC? 'for' star_expressions
        let a, literal, mark, opt;
        mark = this.mark();
        if ((opt = this.expect("ASYNC")) && (literal = this.expect("for")) && (a = this.star_expressions())) {
            return pegen.RAISE_SYNTAX_ERROR_INVALID_TARGET(FOR_TARGETS, a);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    invalid_group() {
        //# invalid_group: '(' starred_expression ')'
        let a, literal, literal_1, mark;
        mark = this.mark();
        if ((literal = this.expect("(")) && (a = this.starred_expression()) && (literal_1 = this.expect(")"))) {
            return pegen.RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, "can't use starred expression here");
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    invalid_import_from_targets() {
        //# invalid_import_from_targets: import_from_as_names ','
        let import_from_as_names, literal, mark;
        mark = this.mark();
        if ((import_from_as_names = this.import_from_as_names()) && (literal = this.expect(","))) {
            return pegen.RAISE_SYNTAX_ERROR("trailing comma not allowed without surrounding parentheses");
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop0_1() {
        //# _loop0_1: NEWLINE
        let children, mark, newline;
        mark = this.mark();
        children = [];
        while ((newline = this.expect("NEWLINE"))) {
            children.push(newline);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop0_2() {
        //# _loop0_2: NEWLINE
        let children, mark, newline;
        mark = this.mark();
        children = [];
        while ((newline = this.expect("NEWLINE"))) {
            children.push(newline);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop0_4() {
        //# _loop0_4: ',' expression
        let children, elem, literal, mark;
        mark = this.mark();
        children = [];
        while ((literal = this.expect(",")) && (elem = this.expression())) {
            children.push(elem);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _gather_3() {
        //# _gather_3: expression _loop0_4
        let elem, mark, seq;
        mark = this.mark();
        if ((elem = this.expression()) !== null && (seq = this._loop0_4()) !== null) {
            return [elem, ...seq];
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop0_6() {
        //# _loop0_6: ',' expression
        let children, elem, literal, mark;
        mark = this.mark();
        children = [];
        while ((literal = this.expect(",")) && (elem = this.expression())) {
            children.push(elem);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _gather_5() {
        //# _gather_5: expression _loop0_6
        let elem, mark, seq;
        mark = this.mark();
        if ((elem = this.expression()) !== null && (seq = this._loop0_6()) !== null) {
            return [elem, ...seq];
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop0_8() {
        //# _loop0_8: ',' expression
        let children, elem, literal, mark;
        mark = this.mark();
        children = [];
        while ((literal = this.expect(",")) && (elem = this.expression())) {
            children.push(elem);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _gather_7() {
        //# _gather_7: expression _loop0_8
        let elem, mark, seq;
        mark = this.mark();
        if ((elem = this.expression()) !== null && (seq = this._loop0_8()) !== null) {
            return [elem, ...seq];
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop0_10() {
        //# _loop0_10: ',' expression
        let children, elem, literal, mark;
        mark = this.mark();
        children = [];
        while ((literal = this.expect(",")) && (elem = this.expression())) {
            children.push(elem);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _gather_9() {
        //# _gather_9: expression _loop0_10
        let elem, mark, seq;
        mark = this.mark();
        if ((elem = this.expression()) !== null && (seq = this._loop0_10()) !== null) {
            return [elem, ...seq];
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop1_11() {
        //# _loop1_11: statement
        let children, mark, statement;
        mark = this.mark();
        children = [];
        while ((statement = this.statement())) {
            children.push(statement);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop0_13() {
        //# _loop0_13: ';' simple_stmt
        let children, elem, literal, mark;
        mark = this.mark();
        children = [];
        while ((literal = this.expect(";")) && (elem = this.simple_stmt())) {
            children.push(elem);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _gather_12() {
        //# _gather_12: simple_stmt _loop0_13
        let elem, mark, seq;
        mark = this.mark();
        if ((elem = this.simple_stmt()) !== null && (seq = this._loop0_13()) !== null) {
            return [elem, ...seq];
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_14() {
        //# _tmp_14: 'import' | 'from'
        let literal, mark;
        mark = this.mark();
        if ((literal = this.expect("import"))) {
            return literal;
        }
        this.reset(mark);
        if ((literal = this.expect("from"))) {
            return literal;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_15() {
        //# _tmp_15: 'def' | '@' | ASYNC
        let async, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("def"))) {
            return literal;
        }
        this.reset(mark);
        if ((literal = this.expect("@"))) {
            return literal;
        }
        this.reset(mark);
        if ((async = this.expect("ASYNC"))) {
            return async;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_16() {
        //# _tmp_16: 'class' | '@'
        let literal, mark;
        mark = this.mark();
        if ((literal = this.expect("class"))) {
            return literal;
        }
        this.reset(mark);
        if ((literal = this.expect("@"))) {
            return literal;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_17() {
        //# _tmp_17: 'with' | ASYNC
        let async, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("with"))) {
            return literal;
        }
        this.reset(mark);
        if ((async = this.expect("ASYNC"))) {
            return async;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_18() {
        //# _tmp_18: 'for' | ASYNC
        let async, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("for"))) {
            return literal;
        }
        this.reset(mark);
        if ((async = this.expect("ASYNC"))) {
            return async;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_19() {
        //# _tmp_19: '=' annotated_rhs
        let d, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("=")) && (d = this.annotated_rhs())) {
            return d;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_20() {
        //# _tmp_20: '(' single_target ')' | single_subscript_attribute_target
        let b, literal, literal_1, mark, single_subscript_attribute_target;
        mark = this.mark();
        if ((literal = this.expect("(")) && (b = this.single_target()) && (literal_1 = this.expect(")"))) {
            return b;
        }
        this.reset(mark);
        if ((single_subscript_attribute_target = this.single_subscript_attribute_target())) {
            return single_subscript_attribute_target;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_21() {
        //# _tmp_21: '=' annotated_rhs
        let d, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("=")) && (d = this.annotated_rhs())) {
            return d;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop1_22() {
        //# _loop1_22: (star_targets '=')
        let _tmp_136, children, mark;
        mark = this.mark();
        children = [];
        while ((_tmp_136 = this._tmp_136())) {
            children.push(_tmp_136);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _tmp_23() {
        //# _tmp_23: yield_expr | star_expressions
        let mark, star_expressions, yield_expr;
        mark = this.mark();
        if ((yield_expr = this.yield_expr())) {
            return yield_expr;
        }
        this.reset(mark);
        if ((star_expressions = this.star_expressions())) {
            return star_expressions;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_24() {
        //# _tmp_24: yield_expr | star_expressions
        let mark, star_expressions, yield_expr;
        mark = this.mark();
        if ((yield_expr = this.yield_expr())) {
            return yield_expr;
        }
        this.reset(mark);
        if ((star_expressions = this.star_expressions())) {
            return star_expressions;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop0_26() {
        //# _loop0_26: ',' NAME
        let children, elem, literal, mark;
        mark = this.mark();
        children = [];
        while ((literal = this.expect(",")) && (elem = this.name())) {
            children.push(elem);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _gather_25() {
        //# _gather_25: NAME _loop0_26
        let elem, mark, seq;
        mark = this.mark();
        if ((elem = this.name()) !== null && (seq = this._loop0_26()) !== null) {
            return [elem, ...seq];
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop0_28() {
        //# _loop0_28: ',' NAME
        let children, elem, literal, mark;
        mark = this.mark();
        children = [];
        while ((literal = this.expect(",")) && (elem = this.name())) {
            children.push(elem);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _gather_27() {
        //# _gather_27: NAME _loop0_28
        let elem, mark, seq;
        mark = this.mark();
        if ((elem = this.name()) !== null && (seq = this._loop0_28()) !== null) {
            return [elem, ...seq];
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_29() {
        //# _tmp_29: ',' expression
        let literal, mark, z;
        mark = this.mark();
        if ((literal = this.expect(",")) && (z = this.expression())) {
            return z;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_30() {
        //# _tmp_30: ';' | NEWLINE
        let literal, mark, newline;
        mark = this.mark();
        if ((literal = this.expect(";"))) {
            return literal;
        }
        this.reset(mark);
        if ((newline = this.expect("NEWLINE"))) {
            return newline;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop0_31() {
        //# _loop0_31: ('.' | '...')
        let _tmp_137, children, mark;
        mark = this.mark();
        children = [];
        while ((_tmp_137 = this._tmp_137())) {
            children.push(_tmp_137);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop1_32() {
        //# _loop1_32: ('.' | '...')
        let _tmp_138, children, mark;
        mark = this.mark();
        children = [];
        while ((_tmp_138 = this._tmp_138())) {
            children.push(_tmp_138);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop0_34() {
        //# _loop0_34: ',' import_from_as_name
        let children, elem, literal, mark;
        mark = this.mark();
        children = [];
        while ((literal = this.expect(",")) && (elem = this.import_from_as_name())) {
            children.push(elem);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _gather_33() {
        //# _gather_33: import_from_as_name _loop0_34
        let elem, mark, seq;
        mark = this.mark();
        if ((elem = this.import_from_as_name()) !== null && (seq = this._loop0_34()) !== null) {
            return [elem, ...seq];
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_35() {
        //# _tmp_35: 'as' NAME
        let literal, mark, z;
        mark = this.mark();
        if ((literal = this.expect("as")) && (z = this.name())) {
            return z;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop0_37() {
        //# _loop0_37: ',' dotted_as_name
        let children, elem, literal, mark;
        mark = this.mark();
        children = [];
        while ((literal = this.expect(",")) && (elem = this.dotted_as_name())) {
            children.push(elem);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _gather_36() {
        //# _gather_36: dotted_as_name _loop0_37
        let elem, mark, seq;
        mark = this.mark();
        if ((elem = this.dotted_as_name()) !== null && (seq = this._loop0_37()) !== null) {
            return [elem, ...seq];
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_38() {
        //# _tmp_38: 'as' NAME
        let literal, mark, z;
        mark = this.mark();
        if ((literal = this.expect("as")) && (z = this.name())) {
            return z;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop0_40() {
        //# _loop0_40: ',' with_item
        let children, elem, literal, mark;
        mark = this.mark();
        children = [];
        while ((literal = this.expect(",")) && (elem = this.with_item())) {
            children.push(elem);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _gather_39() {
        //# _gather_39: with_item _loop0_40
        let elem, mark, seq;
        mark = this.mark();
        if ((elem = this.with_item()) !== null && (seq = this._loop0_40()) !== null) {
            return [elem, ...seq];
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop0_42() {
        //# _loop0_42: ',' with_item
        let children, elem, literal, mark;
        mark = this.mark();
        children = [];
        while ((literal = this.expect(",")) && (elem = this.with_item())) {
            children.push(elem);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _gather_41() {
        //# _gather_41: with_item _loop0_42
        let elem, mark, seq;
        mark = this.mark();
        if ((elem = this.with_item()) !== null && (seq = this._loop0_42()) !== null) {
            return [elem, ...seq];
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop0_44() {
        //# _loop0_44: ',' with_item
        let children, elem, literal, mark;
        mark = this.mark();
        children = [];
        while ((literal = this.expect(",")) && (elem = this.with_item())) {
            children.push(elem);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _gather_43() {
        //# _gather_43: with_item _loop0_44
        let elem, mark, seq;
        mark = this.mark();
        if ((elem = this.with_item()) !== null && (seq = this._loop0_44()) !== null) {
            return [elem, ...seq];
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop0_46() {
        //# _loop0_46: ',' with_item
        let children, elem, literal, mark;
        mark = this.mark();
        children = [];
        while ((literal = this.expect(",")) && (elem = this.with_item())) {
            children.push(elem);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _gather_45() {
        //# _gather_45: with_item _loop0_46
        let elem, mark, seq;
        mark = this.mark();
        if ((elem = this.with_item()) !== null && (seq = this._loop0_46()) !== null) {
            return [elem, ...seq];
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_47() {
        //# _tmp_47: ',' | ')' | ':'
        let literal, mark;
        mark = this.mark();
        if ((literal = this.expect(","))) {
            return literal;
        }
        this.reset(mark);
        if ((literal = this.expect(")"))) {
            return literal;
        }
        this.reset(mark);
        if ((literal = this.expect(":"))) {
            return literal;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop1_48() {
        //# _loop1_48: except_block
        let children, except_block, mark;
        mark = this.mark();
        children = [];
        while ((except_block = this.except_block())) {
            children.push(except_block);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _tmp_49() {
        //# _tmp_49: 'as' NAME
        let literal, mark, z;
        mark = this.mark();
        if ((literal = this.expect("as")) && (z = this.name())) {
            return z;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_50() {
        //# _tmp_50: 'from' expression
        let literal, mark, z;
        mark = this.mark();
        if ((literal = this.expect("from")) && (z = this.expression())) {
            return z;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_51() {
        //# _tmp_51: '->' expression
        let literal, mark, z;
        mark = this.mark();
        if ((literal = this.expect("->")) && (z = this.expression())) {
            return z;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_52() {
        //# _tmp_52: '->' expression
        let literal, mark, z;
        mark = this.mark();
        if ((literal = this.expect("->")) && (z = this.expression())) {
            return z;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_53() {
        //# _tmp_53: NEWLINE INDENT
        let indent, mark, newline;
        mark = this.mark();
        if ((newline = this.expect("NEWLINE")) && (indent = this.expect("INDENT"))) {
            return newline, indent;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop0_54() {
        //# _loop0_54: param_no_default
        let children, mark, param_no_default;
        mark = this.mark();
        children = [];
        while ((param_no_default = this.param_no_default())) {
            children.push(param_no_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop0_55() {
        //# _loop0_55: param_with_default
        let children, mark, param_with_default;
        mark = this.mark();
        children = [];
        while ((param_with_default = this.param_with_default())) {
            children.push(param_with_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop0_56() {
        //# _loop0_56: param_with_default
        let children, mark, param_with_default;
        mark = this.mark();
        children = [];
        while ((param_with_default = this.param_with_default())) {
            children.push(param_with_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop1_57() {
        //# _loop1_57: param_no_default
        let children, mark, param_no_default;
        mark = this.mark();
        children = [];
        while ((param_no_default = this.param_no_default())) {
            children.push(param_no_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop0_58() {
        //# _loop0_58: param_with_default
        let children, mark, param_with_default;
        mark = this.mark();
        children = [];
        while ((param_with_default = this.param_with_default())) {
            children.push(param_with_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop1_59() {
        //# _loop1_59: param_with_default
        let children, mark, param_with_default;
        mark = this.mark();
        children = [];
        while ((param_with_default = this.param_with_default())) {
            children.push(param_with_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop1_60() {
        //# _loop1_60: param_no_default
        let children, mark, param_no_default;
        mark = this.mark();
        children = [];
        while ((param_no_default = this.param_no_default())) {
            children.push(param_no_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop1_61() {
        //# _loop1_61: param_no_default
        let children, mark, param_no_default;
        mark = this.mark();
        children = [];
        while ((param_no_default = this.param_no_default())) {
            children.push(param_no_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop0_62() {
        //# _loop0_62: param_no_default
        let children, mark, param_no_default;
        mark = this.mark();
        children = [];
        while ((param_no_default = this.param_no_default())) {
            children.push(param_no_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop1_63() {
        //# _loop1_63: param_with_default
        let children, mark, param_with_default;
        mark = this.mark();
        children = [];
        while ((param_with_default = this.param_with_default())) {
            children.push(param_with_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop0_64() {
        //# _loop0_64: param_no_default
        let children, mark, param_no_default;
        mark = this.mark();
        children = [];
        while ((param_no_default = this.param_no_default())) {
            children.push(param_no_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop1_65() {
        //# _loop1_65: param_with_default
        let children, mark, param_with_default;
        mark = this.mark();
        children = [];
        while ((param_with_default = this.param_with_default())) {
            children.push(param_with_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop0_66() {
        //# _loop0_66: param_maybe_default
        let children, mark, param_maybe_default;
        mark = this.mark();
        children = [];
        while ((param_maybe_default = this.param_maybe_default())) {
            children.push(param_maybe_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop1_67() {
        //# _loop1_67: param_maybe_default
        let children, mark, param_maybe_default;
        mark = this.mark();
        children = [];
        while ((param_maybe_default = this.param_maybe_default())) {
            children.push(param_maybe_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop1_68() {
        //# _loop1_68: ('@' named_expression NEWLINE)
        let _tmp_139, children, mark;
        mark = this.mark();
        children = [];
        while ((_tmp_139 = this._tmp_139())) {
            children.push(_tmp_139);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _tmp_69() {
        //# _tmp_69: '(' arguments? ')'
        let literal, literal_1, mark, z;
        mark = this.mark();
        if ((literal = this.expect("(")) && (z = this.arguments()) && (literal_1 = this.expect(")"))) {
            return z;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop1_70() {
        //# _loop1_70: (',' star_expression)
        let _tmp_140, children, mark;
        mark = this.mark();
        children = [];
        while ((_tmp_140 = this._tmp_140())) {
            children.push(_tmp_140);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop0_72() {
        //# _loop0_72: ',' star_named_expression
        let children, elem, literal, mark;
        mark = this.mark();
        children = [];
        while ((literal = this.expect(",")) && (elem = this.star_named_expression())) {
            children.push(elem);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _gather_71() {
        //# _gather_71: star_named_expression _loop0_72
        let elem, mark, seq;
        mark = this.mark();
        if ((elem = this.star_named_expression()) !== null && (seq = this._loop0_72()) !== null) {
            return [elem, ...seq];
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop1_73() {
        //# _loop1_73: (',' expression)
        let _tmp_141, children, mark;
        mark = this.mark();
        children = [];
        while ((_tmp_141 = this._tmp_141())) {
            children.push(_tmp_141);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop0_74() {
        //# _loop0_74: lambda_param_no_default
        let children, lambda_param_no_default, mark;
        mark = this.mark();
        children = [];
        while ((lambda_param_no_default = this.lambda_param_no_default())) {
            children.push(lambda_param_no_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop0_75() {
        //# _loop0_75: lambda_param_with_default
        let children, lambda_param_with_default, mark;
        mark = this.mark();
        children = [];
        while ((lambda_param_with_default = this.lambda_param_with_default())) {
            children.push(lambda_param_with_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop0_76() {
        //# _loop0_76: lambda_param_with_default
        let children, lambda_param_with_default, mark;
        mark = this.mark();
        children = [];
        while ((lambda_param_with_default = this.lambda_param_with_default())) {
            children.push(lambda_param_with_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop1_77() {
        //# _loop1_77: lambda_param_no_default
        let children, lambda_param_no_default, mark;
        mark = this.mark();
        children = [];
        while ((lambda_param_no_default = this.lambda_param_no_default())) {
            children.push(lambda_param_no_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop0_78() {
        //# _loop0_78: lambda_param_with_default
        let children, lambda_param_with_default, mark;
        mark = this.mark();
        children = [];
        while ((lambda_param_with_default = this.lambda_param_with_default())) {
            children.push(lambda_param_with_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop1_79() {
        //# _loop1_79: lambda_param_with_default
        let children, lambda_param_with_default, mark;
        mark = this.mark();
        children = [];
        while ((lambda_param_with_default = this.lambda_param_with_default())) {
            children.push(lambda_param_with_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop1_80() {
        //# _loop1_80: lambda_param_no_default
        let children, lambda_param_no_default, mark;
        mark = this.mark();
        children = [];
        while ((lambda_param_no_default = this.lambda_param_no_default())) {
            children.push(lambda_param_no_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop1_81() {
        //# _loop1_81: lambda_param_no_default
        let children, lambda_param_no_default, mark;
        mark = this.mark();
        children = [];
        while ((lambda_param_no_default = this.lambda_param_no_default())) {
            children.push(lambda_param_no_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop0_82() {
        //# _loop0_82: lambda_param_no_default
        let children, lambda_param_no_default, mark;
        mark = this.mark();
        children = [];
        while ((lambda_param_no_default = this.lambda_param_no_default())) {
            children.push(lambda_param_no_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop1_83() {
        //# _loop1_83: lambda_param_with_default
        let children, lambda_param_with_default, mark;
        mark = this.mark();
        children = [];
        while ((lambda_param_with_default = this.lambda_param_with_default())) {
            children.push(lambda_param_with_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop0_84() {
        //# _loop0_84: lambda_param_no_default
        let children, lambda_param_no_default, mark;
        mark = this.mark();
        children = [];
        while ((lambda_param_no_default = this.lambda_param_no_default())) {
            children.push(lambda_param_no_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop1_85() {
        //# _loop1_85: lambda_param_with_default
        let children, lambda_param_with_default, mark;
        mark = this.mark();
        children = [];
        while ((lambda_param_with_default = this.lambda_param_with_default())) {
            children.push(lambda_param_with_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop0_86() {
        //# _loop0_86: lambda_param_maybe_default
        let children, lambda_param_maybe_default, mark;
        mark = this.mark();
        children = [];
        while ((lambda_param_maybe_default = this.lambda_param_maybe_default())) {
            children.push(lambda_param_maybe_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop1_87() {
        //# _loop1_87: lambda_param_maybe_default
        let children, lambda_param_maybe_default, mark;
        mark = this.mark();
        children = [];
        while ((lambda_param_maybe_default = this.lambda_param_maybe_default())) {
            children.push(lambda_param_maybe_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop1_88() {
        //# _loop1_88: ('or' conjunction)
        let _tmp_142, children, mark;
        mark = this.mark();
        children = [];
        while ((_tmp_142 = this._tmp_142())) {
            children.push(_tmp_142);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop1_89() {
        //# _loop1_89: ('and' inversion)
        let _tmp_143, children, mark;
        mark = this.mark();
        children = [];
        while ((_tmp_143 = this._tmp_143())) {
            children.push(_tmp_143);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop1_90() {
        //# _loop1_90: compare_op_bitwise_or_pair
        let children, compare_op_bitwise_or_pair, mark;
        mark = this.mark();
        children = [];
        while ((compare_op_bitwise_or_pair = this.compare_op_bitwise_or_pair())) {
            children.push(compare_op_bitwise_or_pair);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop0_92() {
        //# _loop0_92: ',' slice
        let children, elem, literal, mark;
        mark = this.mark();
        children = [];
        while ((literal = this.expect(",")) && (elem = this.slice())) {
            children.push(elem);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _gather_91() {
        //# _gather_91: slice _loop0_92
        let elem, mark, seq;
        mark = this.mark();
        if ((elem = this.slice()) !== null && (seq = this._loop0_92()) !== null) {
            return [elem, ...seq];
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_93() {
        //# _tmp_93: ':' expression?
        let d, literal, mark;
        mark = this.mark();
        if ((literal = this.expect(":")) && (d = this.expression())) {
            return d;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_94() {
        //# _tmp_94: tuple | group | genexp
        let genexp, group, mark, tuple;
        mark = this.mark();
        if ((tuple = this.tuple())) {
            return tuple;
        }
        this.reset(mark);
        if ((group = this.group())) {
            return group;
        }
        this.reset(mark);
        if ((genexp = this.genexp())) {
            return genexp;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_95() {
        //# _tmp_95: list | listcomp
        let list, listcomp, mark;
        mark = this.mark();
        if ((list = this.list())) {
            return list;
        }
        this.reset(mark);
        if ((listcomp = this.listcomp())) {
            return listcomp;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_96() {
        //# _tmp_96: dict | set | dictcomp | setcomp
        let dict, dictcomp, mark, set, setcomp;
        mark = this.mark();
        if ((dict = this.dict())) {
            return dict;
        }
        this.reset(mark);
        if ((set = this.set())) {
            return set;
        }
        this.reset(mark);
        if ((dictcomp = this.dictcomp())) {
            return dictcomp;
        }
        this.reset(mark);
        if ((setcomp = this.setcomp())) {
            return setcomp;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop1_97() {
        //# _loop1_97: STRING
        let children, mark, string;
        mark = this.mark();
        children = [];
        while ((string = this.string())) {
            children.push(string);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _tmp_98() {
        //# _tmp_98: star_named_expression ',' star_named_expressions?
        let literal, mark, y, z;
        mark = this.mark();
        if ((y = this.star_named_expression()) && (literal = this.expect(",")) && (z = this.star_named_expressions())) {
            return pegen.seq_insert_in_front(y, z);
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_99() {
        //# _tmp_99: yield_expr | named_expression
        let mark, named_expression, yield_expr;
        mark = this.mark();
        if ((yield_expr = this.yield_expr())) {
            return yield_expr;
        }
        this.reset(mark);
        if ((named_expression = this.named_expression())) {
            return named_expression;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop0_101() {
        //# _loop0_101: ',' double_starred_kvpair
        let children, elem, literal, mark;
        mark = this.mark();
        children = [];
        while ((literal = this.expect(",")) && (elem = this.double_starred_kvpair())) {
            children.push(elem);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _gather_100() {
        //# _gather_100: double_starred_kvpair _loop0_101
        let elem, mark, seq;
        mark = this.mark();
        if ((elem = this.double_starred_kvpair()) !== null && (seq = this._loop0_101()) !== null) {
            return [elem, ...seq];
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop1_102() {
        //# _loop1_102: for_if_clause
        let children, for_if_clause, mark;
        mark = this.mark();
        children = [];
        while ((for_if_clause = this.for_if_clause())) {
            children.push(for_if_clause);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop0_103() {
        //# _loop0_103: ('if' disjunction)
        let _tmp_144, children, mark;
        mark = this.mark();
        children = [];
        while ((_tmp_144 = this._tmp_144())) {
            children.push(_tmp_144);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop0_104() {
        //# _loop0_104: ('if' disjunction)
        let _tmp_145, children, mark;
        mark = this.mark();
        children = [];
        while ((_tmp_145 = this._tmp_145())) {
            children.push(_tmp_145);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop0_106() {
        //# _loop0_106: ',' (starred_expression | named_expression !'=')
        let children, elem, literal, mark;
        mark = this.mark();
        children = [];
        while ((literal = this.expect(",")) && (elem = this._tmp_146())) {
            children.push(elem);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _gather_105() {
        //# _gather_105: (starred_expression | named_expression !'=') _loop0_106
        let elem, mark, seq;
        mark = this.mark();
        if ((elem = this._tmp_146()) !== null && (seq = this._loop0_106()) !== null) {
            return [elem, ...seq];
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_107() {
        //# _tmp_107: ',' kwargs
        let k, literal, mark;
        mark = this.mark();
        if ((literal = this.expect(",")) && (k = this.kwargs())) {
            return k;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop0_109() {
        //# _loop0_109: ',' kwarg_or_starred
        let children, elem, literal, mark;
        mark = this.mark();
        children = [];
        while ((literal = this.expect(",")) && (elem = this.kwarg_or_starred())) {
            children.push(elem);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _gather_108() {
        //# _gather_108: kwarg_or_starred _loop0_109
        let elem, mark, seq;
        mark = this.mark();
        if ((elem = this.kwarg_or_starred()) !== null && (seq = this._loop0_109()) !== null) {
            return [elem, ...seq];
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop0_111() {
        //# _loop0_111: ',' kwarg_or_double_starred
        let children, elem, literal, mark;
        mark = this.mark();
        children = [];
        while ((literal = this.expect(",")) && (elem = this.kwarg_or_double_starred())) {
            children.push(elem);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _gather_110() {
        //# _gather_110: kwarg_or_double_starred _loop0_111
        let elem, mark, seq;
        mark = this.mark();
        if ((elem = this.kwarg_or_double_starred()) !== null && (seq = this._loop0_111()) !== null) {
            return [elem, ...seq];
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop0_113() {
        //# _loop0_113: ',' kwarg_or_starred
        let children, elem, literal, mark;
        mark = this.mark();
        children = [];
        while ((literal = this.expect(",")) && (elem = this.kwarg_or_starred())) {
            children.push(elem);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _gather_112() {
        //# _gather_112: kwarg_or_starred _loop0_113
        let elem, mark, seq;
        mark = this.mark();
        if ((elem = this.kwarg_or_starred()) !== null && (seq = this._loop0_113()) !== null) {
            return [elem, ...seq];
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop0_115() {
        //# _loop0_115: ',' kwarg_or_double_starred
        let children, elem, literal, mark;
        mark = this.mark();
        children = [];
        while ((literal = this.expect(",")) && (elem = this.kwarg_or_double_starred())) {
            children.push(elem);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _gather_114() {
        //# _gather_114: kwarg_or_double_starred _loop0_115
        let elem, mark, seq;
        mark = this.mark();
        if ((elem = this.kwarg_or_double_starred()) !== null && (seq = this._loop0_115()) !== null) {
            return [elem, ...seq];
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop0_116() {
        //# _loop0_116: (',' star_target)
        let _tmp_147, children, mark;
        mark = this.mark();
        children = [];
        while ((_tmp_147 = this._tmp_147())) {
            children.push(_tmp_147);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop0_118() {
        //# _loop0_118: ',' star_target
        let children, elem, literal, mark;
        mark = this.mark();
        children = [];
        while ((literal = this.expect(",")) && (elem = this.star_target())) {
            children.push(elem);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _gather_117() {
        //# _gather_117: star_target _loop0_118
        let elem, mark, seq;
        mark = this.mark();
        if ((elem = this.star_target()) !== null && (seq = this._loop0_118()) !== null) {
            return [elem, ...seq];
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_119() {
        //# _tmp_119: !'*' star_target
        let mark, star_target;
        mark = this.mark();
        if (this.negative_lookahead(this.expect, "*") && (star_target = this.star_target())) {
            return star_target;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop0_121() {
        //# _loop0_121: ',' del_target
        let children, elem, literal, mark;
        mark = this.mark();
        children = [];
        while ((literal = this.expect(",")) && (elem = this.del_target())) {
            children.push(elem);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _gather_120() {
        //# _gather_120: del_target _loop0_121
        let elem, mark, seq;
        mark = this.mark();
        if ((elem = this.del_target()) !== null && (seq = this._loop0_121()) !== null) {
            return [elem, ...seq];
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop0_123() {
        //# _loop0_123: ',' target
        let children, elem, literal, mark;
        mark = this.mark();
        children = [];
        while ((literal = this.expect(",")) && (elem = this.target())) {
            children.push(elem);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _gather_122() {
        //# _gather_122: target _loop0_123
        let elem, mark, seq;
        mark = this.mark();
        if ((elem = this.target()) !== null && (seq = this._loop0_123()) !== null) {
            return [elem, ...seq];
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_124() {
        //# _tmp_124: args | expression for_if_clauses
        let args, expression, for_if_clauses, mark;
        mark = this.mark();
        if ((args = this.args())) {
            return args;
        }
        this.reset(mark);
        if ((expression = this.expression()) && (for_if_clauses = this.for_if_clauses())) {
            return expression, for_if_clauses;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop0_125() {
        //# _loop0_125: star_named_expressions
        let children, mark, star_named_expressions;
        mark = this.mark();
        children = [];
        while ((star_named_expressions = this.star_named_expressions())) {
            children.push(star_named_expressions);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop0_126() {
        //# _loop0_126: (star_targets '=')
        let _tmp_148, children, mark;
        mark = this.mark();
        children = [];
        while ((_tmp_148 = this._tmp_148())) {
            children.push(_tmp_148);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop0_127() {
        //# _loop0_127: (star_targets '=')
        let _tmp_149, children, mark;
        mark = this.mark();
        children = [];
        while ((_tmp_149 = this._tmp_149())) {
            children.push(_tmp_149);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _tmp_128() {
        //# _tmp_128: yield_expr | star_expressions
        let mark, star_expressions, yield_expr;
        mark = this.mark();
        if ((yield_expr = this.yield_expr())) {
            return yield_expr;
        }
        this.reset(mark);
        if ((star_expressions = this.star_expressions())) {
            return star_expressions;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_129() {
        //# _tmp_129: '[' | '(' | '{'
        let literal, mark;
        mark = this.mark();
        if ((literal = this.expect("["))) {
            return literal;
        }
        this.reset(mark);
        if ((literal = this.expect("("))) {
            return literal;
        }
        this.reset(mark);
        if ((literal = this.expect("{"))) {
            return literal;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop0_130() {
        //# _loop0_130: param_no_default
        let children, mark, param_no_default;
        mark = this.mark();
        children = [];
        while ((param_no_default = this.param_no_default())) {
            children.push(param_no_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _tmp_131() {
        //# _tmp_131: slash_with_default | param_with_default+
        let _loop1_150, mark, slash_with_default;
        mark = this.mark();
        if ((slash_with_default = this.slash_with_default())) {
            return slash_with_default;
        }
        this.reset(mark);
        if ((_loop1_150 = this._loop1_150())) {
            return _loop1_150;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop0_132() {
        //# _loop0_132: lambda_param_no_default
        let children, lambda_param_no_default, mark;
        mark = this.mark();
        children = [];
        while ((lambda_param_no_default = this.lambda_param_no_default())) {
            children.push(lambda_param_no_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _tmp_133() {
        //# _tmp_133: lambda_slash_with_default | lambda_param_with_default+
        let _loop1_151, lambda_slash_with_default, mark;
        mark = this.mark();
        if ((lambda_slash_with_default = this.lambda_slash_with_default())) {
            return lambda_slash_with_default;
        }
        this.reset(mark);
        if ((_loop1_151 = this._loop1_151())) {
            return _loop1_151;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_134() {
        //# _tmp_134: ')' | ',' (')' | '**')
        let _tmp_152, literal, mark;
        mark = this.mark();
        if ((literal = this.expect(")"))) {
            return literal;
        }
        this.reset(mark);
        if ((literal = this.expect(",")) && (_tmp_152 = this._tmp_152())) {
            return literal, _tmp_152;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_135() {
        //# _tmp_135: ':' | ',' (':' | '**')
        let _tmp_153, literal, mark;
        mark = this.mark();
        if ((literal = this.expect(":"))) {
            return literal;
        }
        this.reset(mark);
        if ((literal = this.expect(",")) && (_tmp_153 = this._tmp_153())) {
            return literal, _tmp_153;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_136() {
        //# _tmp_136: star_targets '='
        let literal, mark, z;
        mark = this.mark();
        if ((z = this.star_targets()) && (literal = this.expect("="))) {
            return z;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_137() {
        //# _tmp_137: '.' | '...'
        let literal, mark;
        mark = this.mark();
        if ((literal = this.expect("."))) {
            return literal;
        }
        this.reset(mark);
        if ((literal = this.expect("..."))) {
            return literal;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_138() {
        //# _tmp_138: '.' | '...'
        let literal, mark;
        mark = this.mark();
        if ((literal = this.expect("."))) {
            return literal;
        }
        this.reset(mark);
        if ((literal = this.expect("..."))) {
            return literal;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_139() {
        //# _tmp_139: '@' named_expression NEWLINE
        let f, literal, mark, newline;
        mark = this.mark();
        if ((literal = this.expect("@")) && (f = this.named_expression()) && (newline = this.expect("NEWLINE"))) {
            return f;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_140() {
        //# _tmp_140: ',' star_expression
        let c, literal, mark;
        mark = this.mark();
        if ((literal = this.expect(",")) && (c = this.star_expression())) {
            return c;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_141() {
        //# _tmp_141: ',' expression
        let c, literal, mark;
        mark = this.mark();
        if ((literal = this.expect(",")) && (c = this.expression())) {
            return c;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_142() {
        //# _tmp_142: 'or' conjunction
        let c, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("or")) && (c = this.conjunction())) {
            return c;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_143() {
        //# _tmp_143: 'and' inversion
        let c, literal, mark;
        mark = this.mark();
        if ((literal = this.expect("and")) && (c = this.inversion())) {
            return c;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_144() {
        //# _tmp_144: 'if' disjunction
        let literal, mark, z;
        mark = this.mark();
        if ((literal = this.expect("if")) && (z = this.disjunction())) {
            return z;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_145() {
        //# _tmp_145: 'if' disjunction
        let literal, mark, z;
        mark = this.mark();
        if ((literal = this.expect("if")) && (z = this.disjunction())) {
            return z;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_146() {
        //# _tmp_146: starred_expression | named_expression !'='
        let mark, named_expression, starred_expression;
        mark = this.mark();
        if ((starred_expression = this.starred_expression())) {
            return starred_expression;
        }
        this.reset(mark);
        if ((named_expression = this.named_expression()) && this.negative_lookahead(this.expect, "=")) {
            return named_expression;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_147() {
        //# _tmp_147: ',' star_target
        let c, literal, mark;
        mark = this.mark();
        if ((literal = this.expect(",")) && (c = this.star_target())) {
            return c;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_148() {
        //# _tmp_148: star_targets '='
        let literal, mark, star_targets;
        mark = this.mark();
        if ((star_targets = this.star_targets()) && (literal = this.expect("="))) {
            return star_targets, literal;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_149() {
        //# _tmp_149: star_targets '='
        let literal, mark, star_targets;
        mark = this.mark();
        if ((star_targets = this.star_targets()) && (literal = this.expect("="))) {
            return star_targets, literal;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _loop1_150() {
        //# _loop1_150: param_with_default
        let children, mark, param_with_default;
        mark = this.mark();
        children = [];
        while ((param_with_default = this.param_with_default())) {
            children.push(param_with_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _loop1_151() {
        //# _loop1_151: lambda_param_with_default
        let children, lambda_param_with_default, mark;
        mark = this.mark();
        children = [];
        while ((lambda_param_with_default = this.lambda_param_with_default())) {
            children.push(lambda_param_with_default);
            mark = this.mark();
        }
        this.reset(mark);

        return children;
    }

    // @memoize
    _tmp_152() {
        //# _tmp_152: ')' | '**'
        let literal, mark;
        mark = this.mark();
        if ((literal = this.expect(")"))) {
            return literal;
        }
        this.reset(mark);
        if ((literal = this.expect("**"))) {
            return literal;
        }
        this.reset(mark);

        return null;
    }

    // @memoize
    _tmp_153() {
        //# _tmp_153: ':' | '**'
        let literal, mark;
        mark = this.mark();
        if ((literal = this.expect(":"))) {
            return literal;
        }
        this.reset(mark);
        if ((literal = this.expect("**"))) {
            return literal;
        }
        this.reset(mark);

        return null;
    }
}

const memoizeMethod = memoize.bind(null, GeneratedParser);
const memoizeLeftRecMethod = memoizeLeftRec.bind(null, GeneratedParser);

memoizeMethod("file");
memoizeMethod("interactive");
memoizeMethod("eval");
memoizeMethod("func_type");
memoizeMethod("fstring");
memoizeMethod("type_expressions");
memoizeMethod("statements");
memoizeMethod("statement");
memoizeMethod("statement_newline");
memoizeMethod("simple_stmts");
memoizeMethod("simple_stmt");
memoizeMethod("compound_stmt");
memoizeMethod("assignment");
memoizeMethod("augassign");
memoizeMethod("global_stmt");
memoizeMethod("nonlocal_stmt");
memoizeMethod("yield_stmt");
memoizeMethod("assert_stmt");
memoizeMethod("del_stmt");
memoizeMethod("import_stmt");
memoizeMethod("import_name");
memoizeMethod("import_from");
memoizeMethod("import_from_targets");
memoizeMethod("import_from_as_names");
memoizeMethod("import_from_as_name");
memoizeMethod("dotted_as_names");
memoizeMethod("dotted_as_name");
memoizeLeftRecMethod("dotted_name");
memoizeMethod("if_stmt");
memoizeMethod("elif_stmt");
memoizeMethod("else_block");
memoizeMethod("while_stmt");
memoizeMethod("for_stmt");
memoizeMethod("with_stmt");
memoizeMethod("with_item");
memoizeMethod("try_stmt");
memoizeMethod("except_block");
memoizeMethod("finally_block");
memoizeMethod("return_stmt");
memoizeMethod("raise_stmt");
memoizeMethod("function_def");
memoizeMethod("function_def_raw");
memoizeMethod("func_type_comment");
memoizeMethod("params");
memoizeMethod("parameters");
memoizeMethod("slash_no_default");
memoizeMethod("slash_with_default");
memoizeMethod("star_etc");
memoizeMethod("kwds");
memoizeMethod("param_no_default");
memoizeMethod("param_with_default");
memoizeMethod("param_maybe_default");
memoizeMethod("param");
memoizeMethod("annotation");
memoizeMethod("default");
memoizeMethod("decorators");
memoizeMethod("class_def");
memoizeMethod("class_def_raw");
memoizeMethod("block");
memoizeMethod("star_expressions");
memoizeMethod("star_expression");
memoizeMethod("star_named_expressions");
memoizeMethod("star_named_expression");
memoizeMethod("named_expression");
memoizeMethod("annotated_rhs");
memoizeMethod("expressions");
memoizeMethod("expression");
memoizeMethod("lambdef");
memoizeMethod("lambda_params");
memoizeMethod("lambda_parameters");
memoizeMethod("lambda_slash_no_default");
memoizeMethod("lambda_slash_with_default");
memoizeMethod("lambda_star_etc");
memoizeMethod("lambda_kwds");
memoizeMethod("lambda_param_no_default");
memoizeMethod("lambda_param_with_default");
memoizeMethod("lambda_param_maybe_default");
memoizeMethod("lambda_param");
memoizeMethod("disjunction");
memoizeMethod("conjunction");
memoizeMethod("inversion");
memoizeMethod("comparison");
memoizeMethod("compare_op_bitwise_or_pair");
memoizeMethod("eq_bitwise_or");
memoizeMethod("noteq_bitwise_or");
memoizeMethod("lte_bitwise_or");
memoizeMethod("lt_bitwise_or");
memoizeMethod("gte_bitwise_or");
memoizeMethod("gt_bitwise_or");
memoizeMethod("notin_bitwise_or");
memoizeMethod("in_bitwise_or");
memoizeMethod("isnot_bitwise_or");
memoizeMethod("is_bitwise_or");
memoizeLeftRecMethod("bitwise_or");
memoizeLeftRecMethod("bitwise_xor");
memoizeLeftRecMethod("bitwise_and");
memoizeLeftRecMethod("shift_expr");
memoizeLeftRecMethod("sum");
memoizeLeftRecMethod("term");
memoizeMethod("factor");
memoizeMethod("power");
memoizeMethod("await_primary");
memoizeLeftRecMethod("primary");
memoizeMethod("slices");
memoizeMethod("slice");
memoizeMethod("atom");
memoizeMethod("strings");
memoizeMethod("list");
memoizeMethod("listcomp");
memoizeMethod("tuple");
memoizeMethod("group");
memoizeMethod("genexp");
memoizeMethod("set");
memoizeMethod("setcomp");
memoizeMethod("dict");
memoizeMethod("dictcomp");
memoizeMethod("double_starred_kvpairs");
memoizeMethod("double_starred_kvpair");
memoizeMethod("kvpair");
memoizeMethod("for_if_clauses");
memoizeMethod("for_if_clause");
memoizeMethod("yield_expr");
memoizeMethod("arguments");
memoizeMethod("args");
memoizeMethod("kwargs");
memoizeMethod("starred_expression");
memoizeMethod("kwarg_or_starred");
memoizeMethod("kwarg_or_double_starred");
memoizeMethod("star_targets");
memoizeMethod("star_targets_seq");
memoizeMethod("star_target");
memoizeMethod("star_atom");
memoizeMethod("single_target");
memoizeMethod("single_subscript_attribute_target");
memoizeMethod("del_targets");
memoizeMethod("del_target");
memoizeMethod("del_t_atom");
memoizeMethod("targets");
memoizeMethod("target");
memoizeLeftRecMethod("t_primary");
memoizeMethod("t_lookahead");
memoizeMethod("t_atom");
memoizeMethod("invalid_arguments");
memoizeMethod("invalid_kwarg");
memoizeMethod("invalid_named_expression");
memoizeMethod("invalid_assignment");
memoizeMethod("invalid_ann_assign_target");
memoizeMethod("invalid_del_stmt");
memoizeMethod("invalid_block");
memoizeMethod("invalid_comprehension");
memoizeMethod("invalid_dict_comprehension");
memoizeMethod("invalid_parameters");
memoizeMethod("invalid_lambda_parameters");
memoizeMethod("invalid_star_etc");
memoizeMethod("invalid_lambda_star_etc");
memoizeMethod("invalid_double_type_comments");
memoizeMethod("invalid_with_item");
memoizeMethod("invalid_for_target");
memoizeMethod("invalid_group");
memoizeMethod("invalid_import_from_targets");
memoizeMethod("_loop0_1");
memoizeMethod("_loop0_2");
memoizeMethod("_loop0_4");
memoizeMethod("_gather_3");
memoizeMethod("_loop0_6");
memoizeMethod("_gather_5");
memoizeMethod("_loop0_8");
memoizeMethod("_gather_7");
memoizeMethod("_loop0_10");
memoizeMethod("_gather_9");
memoizeMethod("_loop1_11");
memoizeMethod("_loop0_13");
memoizeMethod("_gather_12");
memoizeMethod("_tmp_14");
memoizeMethod("_tmp_15");
memoizeMethod("_tmp_16");
memoizeMethod("_tmp_17");
memoizeMethod("_tmp_18");
memoizeMethod("_tmp_19");
memoizeMethod("_tmp_20");
memoizeMethod("_tmp_21");
memoizeMethod("_loop1_22");
memoizeMethod("_tmp_23");
memoizeMethod("_tmp_24");
memoizeMethod("_loop0_26");
memoizeMethod("_gather_25");
memoizeMethod("_loop0_28");
memoizeMethod("_gather_27");
memoizeMethod("_tmp_29");
memoizeMethod("_tmp_30");
memoizeMethod("_loop0_31");
memoizeMethod("_loop1_32");
memoizeMethod("_loop0_34");
memoizeMethod("_gather_33");
memoizeMethod("_tmp_35");
memoizeMethod("_loop0_37");
memoizeMethod("_gather_36");
memoizeMethod("_tmp_38");
memoizeMethod("_loop0_40");
memoizeMethod("_gather_39");
memoizeMethod("_loop0_42");
memoizeMethod("_gather_41");
memoizeMethod("_loop0_44");
memoizeMethod("_gather_43");
memoizeMethod("_loop0_46");
memoizeMethod("_gather_45");
memoizeMethod("_tmp_47");
memoizeMethod("_loop1_48");
memoizeMethod("_tmp_49");
memoizeMethod("_tmp_50");
memoizeMethod("_tmp_51");
memoizeMethod("_tmp_52");
memoizeMethod("_tmp_53");
memoizeMethod("_loop0_54");
memoizeMethod("_loop0_55");
memoizeMethod("_loop0_56");
memoizeMethod("_loop1_57");
memoizeMethod("_loop0_58");
memoizeMethod("_loop1_59");
memoizeMethod("_loop1_60");
memoizeMethod("_loop1_61");
memoizeMethod("_loop0_62");
memoizeMethod("_loop1_63");
memoizeMethod("_loop0_64");
memoizeMethod("_loop1_65");
memoizeMethod("_loop0_66");
memoizeMethod("_loop1_67");
memoizeMethod("_loop1_68");
memoizeMethod("_tmp_69");
memoizeMethod("_loop1_70");
memoizeMethod("_loop0_72");
memoizeMethod("_gather_71");
memoizeMethod("_loop1_73");
memoizeMethod("_loop0_74");
memoizeMethod("_loop0_75");
memoizeMethod("_loop0_76");
memoizeMethod("_loop1_77");
memoizeMethod("_loop0_78");
memoizeMethod("_loop1_79");
memoizeMethod("_loop1_80");
memoizeMethod("_loop1_81");
memoizeMethod("_loop0_82");
memoizeMethod("_loop1_83");
memoizeMethod("_loop0_84");
memoizeMethod("_loop1_85");
memoizeMethod("_loop0_86");
memoizeMethod("_loop1_87");
memoizeMethod("_loop1_88");
memoizeMethod("_loop1_89");
memoizeMethod("_loop1_90");
memoizeMethod("_loop0_92");
memoizeMethod("_gather_91");
memoizeMethod("_tmp_93");
memoizeMethod("_tmp_94");
memoizeMethod("_tmp_95");
memoizeMethod("_tmp_96");
memoizeMethod("_loop1_97");
memoizeMethod("_tmp_98");
memoizeMethod("_tmp_99");
memoizeMethod("_loop0_101");
memoizeMethod("_gather_100");
memoizeMethod("_loop1_102");
memoizeMethod("_loop0_103");
memoizeMethod("_loop0_104");
memoizeMethod("_loop0_106");
memoizeMethod("_gather_105");
memoizeMethod("_tmp_107");
memoizeMethod("_loop0_109");
memoizeMethod("_gather_108");
memoizeMethod("_loop0_111");
memoizeMethod("_gather_110");
memoizeMethod("_loop0_113");
memoizeMethod("_gather_112");
memoizeMethod("_loop0_115");
memoizeMethod("_gather_114");
memoizeMethod("_loop0_116");
memoizeMethod("_loop0_118");
memoizeMethod("_gather_117");
memoizeMethod("_tmp_119");
memoizeMethod("_loop0_121");
memoizeMethod("_gather_120");
memoizeMethod("_loop0_123");
memoizeMethod("_gather_122");
memoizeMethod("_tmp_124");
memoizeMethod("_loop0_125");
memoizeMethod("_loop0_126");
memoizeMethod("_loop0_127");
memoizeMethod("_tmp_128");
memoizeMethod("_tmp_129");
memoizeMethod("_loop0_130");
memoizeMethod("_tmp_131");
memoizeMethod("_loop0_132");
memoizeMethod("_tmp_133");
memoizeMethod("_tmp_134");
memoizeMethod("_tmp_135");
memoizeMethod("_tmp_136");
memoizeMethod("_tmp_137");
memoizeMethod("_tmp_138");
memoizeMethod("_tmp_139");
memoizeMethod("_tmp_140");
memoizeMethod("_tmp_141");
memoizeMethod("_tmp_142");
memoizeMethod("_tmp_143");
memoizeMethod("_tmp_144");
memoizeMethod("_tmp_145");
memoizeMethod("_tmp_146");
memoizeMethod("_tmp_147");
memoizeMethod("_tmp_148");
memoizeMethod("_tmp_149");
memoizeMethod("_loop1_150");
memoizeMethod("_loop1_151");
memoizeMethod("_tmp_152");
memoizeMethod("_tmp_153");

// loggger(GeneratedParser, "invalid_primary");