/* File automatically generated by asdl_js.py. */

/* Object that holds all nodes */
/* ----- expr_context ----- */
/** @constructor */
export class Load {}
/** @constructor */
export class Store {}
/** @constructor */
export class Del {}

/* ----- boolop ----- */
/** @constructor */
export class And {}
/** @constructor */
export class Or {}

/* ----- operator ----- */
/** @constructor */
export class Add {}
/** @constructor */
export class Sub {}
/** @constructor */
export class Mult {}
/** @constructor */
export class MatMult {}
/** @constructor */
export class Div {}
/** @constructor */
export class Mod {}
/** @constructor */
export class Pow {}
/** @constructor */
export class LShift {}
/** @constructor */
export class RShift {}
/** @constructor */
export class BitOr {}
/** @constructor */
export class BitXor {}
/** @constructor */
export class BitAnd {}
/** @constructor */
export class FloorDiv {}

/* ----- unaryop ----- */
/** @constructor */
export class Invert {}
/** @constructor */
export class Not {}
/** @constructor */
export class UAdd {}
/** @constructor */
export class USub {}

/* ----- cmpop ----- */
/** @constructor */
export class Eq {}
/** @constructor */
export class NotEq {}
/** @constructor */
export class Lt {}
/** @constructor */
export class LtE {}
/** @constructor */
export class Gt {}
/** @constructor */
export class GtE {}
/** @constructor */
export class Is {}
/** @constructor */
export class IsNot {}
/** @constructor */
export class In {}
/** @constructor */
export class NotIn {}


class mod {
        this.body = body;
        this.type_ignores = type_ignores;

        this.body = body;

        this.body = body;

        this.argtypes = argtypes;
        this.returns = returns;

class stmt {

    constructor (lineno, col_offset, end_lineno, end_col_offset) {
        this.lineno = lineno;
        this.col_offset = col_offset;
        this.end_lineno = end_lineno;
        this.end_col_offset = end_col_offset;
    }
}

        this.name = name;
        this.args = args;
        this.body = body;
        this.decorator_list = decorator_list;
        this.returns = returns;
        this.type_comment = type_comment;

        this.name = name;
        this.args = args;
        this.body = body;
        this.decorator_list = decorator_list;
        this.returns = returns;
        this.type_comment = type_comment;

        this.name = name;
        this.bases = bases;
        this.keywords = keywords;
        this.body = body;
        this.decorator_list = decorator_list;

        this.value = value;

        this.targets = targets;

        this.targets = targets;
        this.value = value;
        this.type_comment = type_comment;

        this.target = target;
        this.op = op;
        this.value = value;

        this.target = target;
        this.annotation = annotation;
        this.value = value;
        this.simple = simple;

        this.target = target;
        this.iter = iter;
        this.body = body;
        this.orelse = orelse;
        this.type_comment = type_comment;

        this.target = target;
        this.iter = iter;
        this.body = body;
        this.orelse = orelse;
        this.type_comment = type_comment;

        this.test = test;
        this.body = body;
        this.orelse = orelse;

        this.test = test;
        this.body = body;
        this.orelse = orelse;

        this.items = items;
        this.body = body;
        this.type_comment = type_comment;

        this.items = items;
        this.body = body;
        this.type_comment = type_comment;

        this.exc = exc;
        this.cause = cause;

        this.body = body;
        this.handlers = handlers;
        this.orelse = orelse;
        this.finalbody = finalbody;

        this.test = test;
        this.msg = msg;

        this.names = names;

        this.module = module;
        this.names = names;
        this.level = level;

        this.names = names;

        this.names = names;

        this.value = value;




class expr {

    constructor (lineno, col_offset, end_lineno, end_col_offset) {
        this.lineno = lineno;
        this.col_offset = col_offset;
        this.end_lineno = end_lineno;
        this.end_col_offset = end_col_offset;
    }
}

        this.op = op;
        this.values = values;

        this.target = target;
        this.value = value;

        this.left = left;
        this.op = op;
        this.right = right;

        this.op = op;
        this.operand = operand;

        this.args = args;
        this.body = body;

        this.test = test;
        this.body = body;
        this.orelse = orelse;

        this.keys = keys;
        this.values = values;

        this.elts = elts;

        this.elt = elt;
        this.generators = generators;

        this.elt = elt;
        this.generators = generators;

        this.key = key;
        this.value = value;
        this.generators = generators;

        this.elt = elt;
        this.generators = generators;

        this.value = value;

        this.value = value;

        this.value = value;

        this.left = left;
        this.ops = ops;
        this.comparators = comparators;

        this.func = func;
        this.args = args;
        this.keywords = keywords;

        this.value = value;
        this.conversion = conversion;
        this.format_spec = format_spec;

        this.values = values;

        this.value = value;
        this.kind = kind;

        this.value = value;
        this.attr = attr;
        this.ctx = ctx;

        this.value = value;
        this.slice = slice;
        this.ctx = ctx;

        this.value = value;
        this.ctx = ctx;

        this.id = id;
        this.ctx = ctx;

        this.elts = elts;
        this.ctx = ctx;

        this.elts = elts;
        this.ctx = ctx;

        this.lower = lower;
        this.upper = upper;
        this.step = step;

class expr_context {
class _Load extends expr_context {
}

class _Store extends expr_context {
}

class _Del extends expr_context {
}

Load = 1
Store = 2
Del = 3

expr_context_to_class = [
    _Load,
    _Store,
    _Del,
]

class boolop {
class _And extends boolop {
}

class _Or extends boolop {
}

And = 1
Or = 2

boolop_to_class = [
    _And,
    _Or,
]

class operator {
class _Add extends operator {
}

class _Sub extends operator {
}

class _Mult extends operator {
}

class _MatMult extends operator {
}

class _Div extends operator {
}

class _Mod extends operator {
}

class _Pow extends operator {
}

class _LShift extends operator {
}

class _RShift extends operator {
}

class _BitOr extends operator {
}

class _BitXor extends operator {
}

class _BitAnd extends operator {
}

class _FloorDiv extends operator {
}

Add = 1
Sub = 2
Mult = 3
MatMult = 4
Div = 5
Mod = 6
Pow = 7
LShift = 8
RShift = 9
BitOr = 10
BitXor = 11
BitAnd = 12
FloorDiv = 13

operator_to_class = [
    _Add,
    _Sub,
    _Mult,
    _MatMult,
    _Div,
    _Mod,
    _Pow,
    _LShift,
    _RShift,
    _BitOr,
    _BitXor,
    _BitAnd,
    _FloorDiv,
]

class unaryop {
class _Invert extends unaryop {
}

class _Not extends unaryop {
}

class _UAdd extends unaryop {
}

class _USub extends unaryop {
}

Invert = 1
Not = 2
UAdd = 3
USub = 4

unaryop_to_class = [
    _Invert,
    _Not,
    _UAdd,
    _USub,
]

class cmpop {
class _Eq extends cmpop {
}

class _NotEq extends cmpop {
}

class _Lt extends cmpop {
}

class _LtE extends cmpop {
}

class _Gt extends cmpop {
}

class _GtE extends cmpop {
}

class _Is extends cmpop {
}

class _IsNot extends cmpop {
}

class _In extends cmpop {
}

class _NotIn extends cmpop {
}

Eq = 1
NotEq = 2
Lt = 3
LtE = 4
Gt = 5
GtE = 6
Is = 7
IsNot = 8
In = 9
NotIn = 10

cmpop_to_class = [
    _Eq,
    _NotEq,
    _Lt,
    _LtE,
    _Gt,
    _GtE,
    _Is,
    _IsNot,
    _In,
    _NotIn,
]

class comprehension extends AST {
class excepthandler {

    constructor (lineno, col_offset, end_lineno, end_col_offset) {
        this.lineno = lineno;
        this.col_offset = col_offset;
        this.end_lineno = end_lineno;
        this.end_col_offset = end_col_offset;
    }
}

        this.type = type;
        this.name = name;
        this.body = body;

class arguments extends AST {
class arg extends AST {
class keyword extends AST {
class alias extends AST {
class withitem extends AST {
class type_ignore {
        this.lineno = lineno;
        this.tag = tag;







/* ---------------------- */
/* constructors for nodes */
/* ---------------------- */





