/* File automatically generated by asdl_js.py. */

/* Object that holds all nodes */
/* ----- expr_context ----- */
/** @constructor */
export const Load = function Load() {};
/** @constructor */
export const Store = function Store() {};
/** @constructor */
export const Del = function Del() {};
/** @constructor */
export const AugLoad = function AugLoad() {};
/** @constructor */
export const AugStore = function AugStore() {};
/** @constructor */
export const Param = function Param() {};

/* ----- boolop ----- */
/** @constructor */
export const And = function And() {};
/** @constructor */
export const Or = function Or() {};

/* ----- operator ----- */
/** @constructor */
export const Add = function Add() {};
/** @constructor */
export const Sub = function Sub() {};
/** @constructor */
export const Mult = function Mult() {};
/** @constructor */
export const MatMult = function MatMult() {};
/** @constructor */
export const Div = function Div() {};
/** @constructor */
export const Mod = function Mod() {};
/** @constructor */
export const Pow = function Pow() {};
/** @constructor */
export const LShift = function LShift() {};
/** @constructor */
export const RShift = function RShift() {};
/** @constructor */
export const BitOr = function BitOr() {};
/** @constructor */
export const BitXor = function BitXor() {};
/** @constructor */
export const BitAnd = function BitAnd() {};
/** @constructor */
export const FloorDiv = function FloorDiv() {};

/* ----- unaryop ----- */
/** @constructor */
export const Invert = function Invert() {};
/** @constructor */
export const Not = function Not() {};
/** @constructor */
export const UAdd = function UAdd() {};
/** @constructor */
export const USub = function USub() {};

/* ----- cmpop ----- */
/** @constructor */
export const Eq = function Eq() {};
/** @constructor */
export const NotEq = function NotEq() {};
/** @constructor */
export const Lt = function Lt() {};
/** @constructor */
export const LtE = function LtE() {};
/** @constructor */
export const Gt = function Gt() {};
/** @constructor */
export const GtE = function GtE() {};
/** @constructor */
export const Is = function Is() {};
/** @constructor */
export const IsNot = function IsNot() {};
/** @constructor */
export const In = function In() {};
/** @constructor */
export const NotIn = function NotIn() {};

/* ---------------------- */
/* constructors for nodes */
/* ---------------------- */

/** @constructor */
export const Module = function Module(/* {asdl_seq *} */ body /* {string} */, docstring) {
    this.body = body;
    this.docstring = docstring;
};

/** @constructor */
export const Interactive = function Interactive(/* {asdl_seq *} */ body) {
    this.body = body;
};

/** @constructor */
export const Expression = function Expression(/* {expr_ty} */ body) {
    this.body = body;
};

/** @constructor */
export const Suite = function Suite(/* {asdl_seq *} */ body) {
    this.body = body;
};

export class FunctionType {};

/** @constructor */
export const FunctionDef = function FunctionDef(
    /* {identifier} */ name,
    /*
                                                    {arguments__ty} */ args,
    /*
                                                    {asdl_seq *} */ body /*
                                                    {asdl_seq *} */,
    decorator_list,
    /*
                                                    {expr_ty} */ returns,
    /*
                                                    {string} */ docstring,
    /*
                                                    {int} */ lineno,
    /* {int}
     */ col_offset
) {
    this.name = name;
    this.args = args;
    this.body = body;
    this.decorator_list = decorator_list;
    this.returns = returns;
    this.docstring = docstring;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const AsyncFunctionDef = function AsyncFunctionDef /* {identifier} */(
    name,
    /*
                                                              {arguments__ty}
                                                              */ args /*
                                                              {asdl_seq *} */,
    body /*
                                                              {asdl_seq *} */,
    decorator_list,
    /* {expr_ty} */
    returns /*
                                                              {string} */,
    docstring,
    /*
                                                              {int} */ lineno,
    /* {int} */
    col_offset
) {
    this.name = name;
    this.args = args;
    this.body = body;
    this.decorator_list = decorator_list;
    this.returns = returns;
    this.docstring = docstring;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const ClassDef = function ClassDef(
    /* {identifier} */ name,
    /* {asdl_seq
     *} */ bases /* {asdl_seq *} */,
    keywords /* {asdl_seq *} */,
    body /* {asdl_seq *} */,
    decorator_list /* {string} */,
    docstring,
    /* {int} */ lineno,
    /*
                                              {int} */ col_offset
) {
    this.name = name;
    this.bases = bases;
    this.keywords = keywords;
    this.body = body;
    this.decorator_list = decorator_list;
    this.docstring = docstring;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Return = function Return(/* {expr_ty} */ value, /* {int} */ lineno, /* {int} */ col_offset) {
    this.value = value;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Delete = function Delete(/* {asdl_seq *} */ targets /* {int} */, lineno, /* {int} */ col_offset) {
    this.targets = targets;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Assign = function Assign(
    /* {asdl_seq *} */ targets,
    /* {expr_ty}
     */ value,
    /* {int} */ lineno,
    /*
                                          {int} */ col_offset
) {
    this.targets = targets;
    this.value = value;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const AugAssign = function AugAssign(
    /* {expr_ty} */ target,
    /*
                                                {operator_ty} */ op,
    /*
                                                {expr_ty} */ value /* {int} */,
    lineno,
    /* {int} */ col_offset
) {
    this.target = target;
    this.op = op;
    this.value = value;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

export class AugOperator{};

/** @constructor */
export const AnnAssign = function AnnAssign(
    /* {expr_ty} */ target,
    /* {expr_ty}
     */ annotation /* {expr_ty} */,
    value,
    /* {int} */ simple,
    /*
                                                {int} */ lineno /* {int} */,
    col_offset
) {
    this.target = target;
    this.annotation = annotation;
    this.value = value;
    this.simple = simple;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const For = function For(
    /* {expr_ty} */ target,
    /* {expr_ty} */ iter,
    /*
                                    {asdl_seq *} */ body /* {asdl_seq *} */,
    orelse,
    /* {int} */ lineno /* {int} */,
    col_offset
) {
    this.target = target;
    this.iter = iter;
    this.body = body;
    this.orelse = orelse;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const AsyncFor = function AsyncFor(
    /* {expr_ty} */ target,
    /* {expr_ty}
     */ iter,
    /* {asdl_seq *} */ body,
    /* {asdl_seq *} */ orelse,
    /*
                                              {int} */ lineno /* {int} */,
    col_offset
) {
    this.target = target;
    this.iter = iter;
    this.body = body;
    this.orelse = orelse;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const While = function While(
    /* {expr_ty} */ test /* {asdl_seq *} */,
    body,
    /* {asdl_seq *} */ orelse,
    /*
                                        {int} */ lineno,
    /* {int} */ col_offset
) {
    this.test = test;
    this.body = body;
    this.orelse = orelse;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const If = function If(
    /* {expr_ty} */ test,
    /* {asdl_seq *} */ body,
    /*
                                  {asdl_seq *} */ orelse,
    /* {int} */ lineno,
    /* {int} */ col_offset
) {
    this.test = test;
    this.body = body;
    this.orelse = orelse;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const With = function With(/* {asdl_seq *} */ items /* {asdl_seq *} */, body, /* {int} */ lineno /* {int} */, col_offset) {
    this.items = items;
    this.body = body;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const AsyncWith = function AsyncWith(
    /* {asdl_seq *} */ items,
    /*
                                                {asdl_seq *} */ body,
    /* {int}
     */ lineno /* {int} */,
    col_offset
) {
    this.items = items;
    this.body = body;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Raise = function Raise(/* {expr_ty} */ exc, /* {expr_ty} */ cause, /* {expr_ty} */ inst /* {expr_ty} */, tback, /* {int} */ lineno /* {int} */, col_offset) {
    this.exc = exc;
    this.cause = cause;
    this.inst = inst;
    this.tback = tback;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Try = function Try(
    /* {asdl_seq *} */ body /* {asdl_seq *} */,
    handlers,
    /* {asdl_seq *} */ orelse,
    /*
                                    {asdl_seq *} */ finalbody /* {int} */,
    lineno,
    /* {int} */ col_offset
) {
    this.body = body;
    this.handlers = handlers;
    this.orelse = orelse;
    this.finalbody = finalbody;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Assert = function Assert(/* {expr_ty} */ test, /* {expr_ty} */ msg, /* {int} */ lineno /* {int} */, col_offset) {
    this.test = test;
    this.msg = msg;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Import = function Import(/* {asdl_seq *} */ names /* {int} */, lineno, /* {int} */ col_offset) {
    this.names = names;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const ImportFrom = function ImportFrom(
    /* {identifier} */ module,
    /*
                                                  {asdl_seq *} */ names,
    /*
                                                  {int} */ level /* {int} */,
    lineno /* {int} */,
    col_offset
) {
    this.module = module;
    this.names = names;
    this.level = level;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Global = function Global(/* {asdl_seq *} */ names /* {int} */, lineno, /* {int} */ col_offset) {
    this.names = names;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Nonlocal = function Nonlocal(/* {asdl_seq *} */ names /* {int} */, lineno, /* {int} */ col_offset) {
    this.names = names;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Expr = function Expr(/* {expr_ty} */ value, /* {int} */ lineno, /*
                                      {int} */ col_offset) {
    this.value = value;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Pass = function Pass(/* {int} */ lineno, /* {int} */ col_offset) {
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Break = function Break(/* {int} */ lineno, /* {int} */ col_offset) {
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Continue = function Continue(/* {int} */ lineno /* {int} */, col_offset) {
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Print = function Print(/* {expr_ty} */ dest /* {asdl_seq *} */, values, /* {int} */ nl /* {int} */, lineno, /* {int} */ col_offset) {
    this.dest = dest;
    this.values = values;
    this.nl = nl;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Debugger = function Debugger(/* {int} */ lineno /* {int} */, col_offset) {
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const BoolOp = function BoolOp(
    /* {boolop_ty} */ op /* {asdl_seq *} */,
    values,
    /* {int} */ lineno,
    /* {int}
     */ col_offset
) {
    this.op = op;
    this.values = values;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const BinOp = function BinOp(/* {expr_ty} */ left /* {operator_ty} */, op, /* {expr_ty} */ right /* {int} */, lineno, /* {int} */ col_offset) {
    this.left = left;
    this.op = op;
    this.right = right;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const UnaryOp = function UnaryOp(
    /* {unaryop_ty} */ op /* {expr_ty} */,
    operand,
    /* {int} */ lineno,
    /*
                                            {int} */ col_offset
) {
    this.op = op;
    this.operand = operand;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Lambda = function Lambda(
    /* {arguments__ty} */ args,
    /* {expr_ty}
     */ body,
    /* {int} */ lineno,
    /* {int}
     */ col_offset
) {
    this.args = args;
    this.body = body;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const IfExp = function IfExp(/* {expr_ty} */ test, /* {expr_ty} */ body, /* {expr_ty} */ orelse /* {int} */, lineno, /* {int} */ col_offset) {
    this.test = test;
    this.body = body;
    this.orelse = orelse;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Dict = function Dict(/* {asdl_seq *} */ keys /* {asdl_seq *} */, values, /* {int} */ lineno /* {int} */, col_offset) {
    this.keys = keys;
    this.values = values;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Set = function Set(/* {asdl_seq *} */ elts, /* {int} */ lineno, /*
                                    {int} */ col_offset) {
    this.elts = elts;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const ListComp = function ListComp(
    /* {expr_ty} */ elt,
    /* {asdl_seq *}
     */ generators /* {int} */,
    lineno,
    /* {int} */ col_offset
) {
    this.elt = elt;
    this.generators = generators;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const SetComp = function SetComp(
    /* {expr_ty} */ elt /* {asdl_seq *} */,
    generators,
    /* {int} */ lineno,
    /*
                                            {int} */ col_offset
) {
    this.elt = elt;
    this.generators = generators;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const DictComp = function DictComp(/* {expr_ty} */ key /* {expr_ty} */, value /* {asdl_seq *} */, generators, /* {int} */ lineno, /* {int} */ col_offset) {
    this.key = key;
    this.value = value;
    this.generators = generators;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const GeneratorExp = function GeneratorExp(
    /* {expr_ty} */ elt /*
                                                      {asdl_seq *} */,
    generators /* {int} */,
    lineno /* {int} */,
    col_offset
) {
    this.elt = elt;
    this.generators = generators;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Await = function Await(/* {expr_ty} */ value, /* {int} */ lineno, /* {int} */ col_offset) {
    this.value = value;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Yield = function Yield(/* {expr_ty} */ value, /* {int} */ lineno, /* {int} */ col_offset) {
    this.value = value;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const YieldFrom = function YieldFrom(/* {expr_ty} */ value /* {int} */, lineno, /* {int} */ col_offset) {
    this.value = value;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Compare = function Compare(
    /* {expr_ty} */ left,
    /* {asdl_int_seq
     *} */ ops /* {asdl_seq *} */,
    comparators,
    /* {int} */ lineno,
    /*
                                            {int} */ col_offset
) {
    this.left = left;
    this.ops = ops;
    this.comparators = comparators;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Call = function Call(/* {expr_ty} */ func, /* {asdl_seq *} */ args, /* {asdl_seq *} */ keywords /* {int} */, lineno, /* {int} */ col_offset) {
    this.func = func;
    this.args = args;
    this.keywords = keywords;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Num = function Num(
    /* {object} */ n,
    /* {int} */ lineno,
    /* {int}
     */ col_offset
) {
    this.n = n;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Str = function Str(
    /* {string} */ s,
    /* {int} */ lineno,
    /* {int}
     */ col_offset
) {
    this.s = s;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const FormattedValue = function FormattedValue(
    /* {expr_ty} */ value,
    /*
                                                          {int} */ conversion,
    /* {expr_ty} */
    format_spec,
    /* {int}
     */ lineno,
    /* {int}
     */ col_offset
) {
    this.value = value;
    this.conversion = conversion;
    this.format_spec = format_spec;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const JoinedStr = function JoinedStr(
    /* {asdl_seq *} */ values,
    /* {int}
     */ lineno /* {int} */,
    col_offset
) {
    this.values = values;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Bytes = function Bytes(/* {bytes} */ s, /* {int} */ lineno, /*
                                        {int} */ col_offset) {
    this.s = s;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const NameConstant = function NameConstant(
    /* {singleton} */ value,
    /*
                                                      {int} */ lineno,
    /* {int}
     */ col_offset
) {
    this.value = value;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

export const NamedExpr = function NamedExpr() {

}

/** @constructor */
export const Ellipsis = function Ellipsis(/* {int} */ lineno /* {int} */, col_offset) {
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Constant = function Constant(/* {constant} */ value /* {int} */, lineno, /* {int} */ col_offset) {
    this.value = value;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Attribute = function Attribute(
    /* {expr_ty} */ value,
    /*
                                                {identifier} */ attr,
    /*
                                                {expr_context_ty} */ ctx,
    /*
                                                {int} */ lineno /* {int} */,
    col_offset
) {
    this.value = value;
    this.attr = attr;
    this.ctx = ctx;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Subscript = function Subscript(
    /* {expr_ty} */ value,
    /* {slice_ty}
     */ slice,
    /* {expr_context_ty}
     */ ctx,
    /* {int} */ lineno,
    /*
                                                {int} */ col_offset
) {
    this.value = value;
    this.slice = slice;
    this.ctx = ctx;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Starred = function Starred(
    /* {expr_ty} */ value,
    /*
                                            {expr_context_ty} */ ctx,
    /* {int}
     */ lineno,
    /* {int} */ col_offset
) {
    this.value = value;
    this.ctx = ctx;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Name = function Name(/* {identifier} */ id /* {expr_context_ty} */, ctx, /* {int} */ lineno /* {int} */, col_offset) {
    this.id = id;
    this.ctx = ctx;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const List = function List(
    /* {asdl_seq *} */ elts,
    /* {expr_context_ty}
     */ ctx,
    /* {int} */ lineno /* {int} */,
    col_offset
) {
    this.elts = elts;
    this.ctx = ctx;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Tuple = function Tuple(
    /* {asdl_seq *} */ elts,
    /*
                                        {expr_context_ty} */ ctx /* {int} */,
    lineno,
    /* {int} */ col_offset
) {
    this.elts = elts;
    this.ctx = ctx;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const Slice = function Slice(/* {expr_ty} */ lower /* {expr_ty} */, upper, /* {expr_ty} */ step) {
    this.lower = lower;
    this.upper = upper;
    this.step = step;
};

/** @constructor */
export const ExtSlice = function ExtSlice(/* {asdl_seq *} */ dims) {
    this.dims = dims;
};

/** @constructor */
export const Index = function Index(/* {expr_ty} */ value) {
    this.value = value;
};

/** @constructor */
export const comprehension = function comprehension(
    /* {expr_ty} */ target,
    /*
                                                        {expr_ty} */ iter,
    /*
                                                        {asdl_seq *} */ ifs,
    /*
                                                        {int} */ is_async
) {
    this.target = target;
    this.iter = iter;
    this.ifs = ifs;
    this.is_async = is_async;
};

/** @constructor */
export const ExceptHandler = function ExceptHandler(
    /* {expr_ty} */ type,
    /*
                                                        {identifier} */ name,
    /* {asdl_seq *} */
    body /* {int} */,
    lineno /* {int} */,
    col_offset
) {
    this.type = type;
    this.name = name;
    this.body = body;
    this.lineno = lineno;
    this.col_offset = col_offset;
};

/** @constructor */
export const arguments_ = function arguments_(
    /* {asdl_seq *} */ args,
    /*
                                                  {arg_ty} */ vararg,
    /*
                                                  {asdl_seq *} */ kwonlyargs,
    /* {asdl_seq *} */
    kw_defaults /* {arg_ty} */,
    kwarg /* {asdl_seq *} */,
    defaults
) {
    this.args = args;
    this.vararg = vararg;
    this.kwonlyargs = kwonlyargs;
    this.kw_defaults = kw_defaults;
    this.kwarg = kwarg;
    this.defaults = defaults;
};

/** @constructor */
export const arg = function arg(/* {identifier} */ arg /* {expr_ty} */, annotation) {
    this.arg = arg;
    this.annotation = annotation;
};

/** @constructor */
export const keyword = function keyword(/* {identifier} */ arg /* {expr_ty} */, value) {
    this.arg = arg;
    this.value = value;
};

/** @constructor */
export const alias = function alias(/* {identifier} */ name /* {identifier} */, asname) {
    this.name = name;
    this.asname = asname;
};

/** @constructor */
export const withitem = function withitem(/* {expr_ty} */ context_expr, /*
                                              {expr_ty} */ optional_vars) {
    this.context_expr = context_expr;
    this.optional_vars = optional_vars;
};
